
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d8  080033d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08003450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001a8  08003450  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095dc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001813  00000000  00000000  0002967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003789  00000000  00000000  0002ae8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  0002e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  0002ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bec6  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093c4  00000000  00000000  0005b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a0d5  00000000  00000000  000644e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e5b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000198c  00000000  00000000  0016e608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  0016ff94  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00170000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800305c 	.word	0x0800305c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800305c 	.word	0x0800305c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
char choice;
//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 80005e4:	b510      	push	{r4, lr}
 80005e6:	b082      	sub	sp, #8
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80005e8:	f000 f90a 	bl	8000800 <Sys_Init>

	char in[3];
    int size = 3;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80005ec:	483b      	ldr	r0, [pc, #236]	; (80006dc <main+0xf8>)
 80005ee:	f001 fe3f 	bl	8002270 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <main+0xfc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6898      	ldr	r0, [r3, #8]
 80005f8:	f001 fbf4 	bl	8001de4 <fflush>
    printf("Test of the printf() function.\n\n");
 80005fc:	4839      	ldr	r0, [pc, #228]	; (80006e4 <main+0x100>)
 80005fe:	f001 fed3 	bl	80023a8 <puts>


    // Need to enable clock for peripheral bus on GPIO Port J
    __HAL_RCC_GPIOJ_CLK_ENABLE(); 	// Through HAL
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <main+0x104>)
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9a00      	ldr	r2, [sp, #0]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; // or through registers
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
    //// Below two lines are example on how to access a register by knowing it's memory address
    //volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    //*RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal

    GPIOJ->MODER |= 1024U; //Bitmask for GPIO J Pin 5 initialization (set it to Output mode): 0x00000400U or 1024U in decimal
 800061e:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000628:	601a      	str	r2, [r3, #0]
    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 800062a:	2120      	movs	r1, #32
 800062c:	6199      	str	r1, [r3, #24]
    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 800062e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000632:	619a      	str	r2, [r3, #24]
    GPIOJ->ODR ^= (uint16_t)GPIO_PIN_5; // Toggle LED2
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	404a      	eors	r2, r1
 8000638:	615a      	str	r2, [r3, #20]
// It doesn't get lower level than this!
//    volatile uint32_t * GREENLEDMODER = (uint32_t*) 0x40022400U; // Init GPIO J Pin 5 (LED2 with no Alt. func.) to Output
//    *GREENLEDMODER |= 1024U; // Bitmask for GPIO J Pin 5 initialization: 0x00000400U or 1024U in decimal

    volatile uint32_t * GREENLEDBSRR = (uint32_t*) 0x40022418U; // Address of GPIO J Bit Set/Reset Register
    *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 800063a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800063e:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418

    HAL_Delay(1000); // Pause for a second
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fa35 	bl	8000ab4 <HAL_Delay>
 800064a:	e018      	b.n	800067e <main+0x9a>
//        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);         // Turn green LED on (GPIO_PIN_SET == 1)
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
        if (choice == '0')
            return 1;
        else if(choice == '1')
            printf("\r\n\nHere we go again.\r\n\n");
 800064c:	4827      	ldr	r0, [pc, #156]	; (80006ec <main+0x108>)
 800064e:	f001 feab 	bl	80023a8 <puts>
 8000652:	e007      	b.n	8000664 <main+0x80>
        else if(choice == '2')          // clear the screen with <ESC>[2J
        {
            printf("\033[2J\033[;H");
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <main+0xf8>)
 8000656:	f001 fe0b 	bl	8002270 <iprintf>
            fflush(stdout);
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <main+0xfc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6898      	ldr	r0, [r3, #8]
 8000660:	f001 fbc0 	bl	8001de4 <fflush>
//						uart_print(&USB_UART, choice);
            printf("\" is not a valid choice.\r\n\n");
        }

// Messing around with more stuff
				printf("Enter an alphanumeric sequence (press <enter> if you want to send less than %d characters): \r\n", size + 1);
 8000664:	2104      	movs	r1, #4
 8000666:	4822      	ldr	r0, [pc, #136]	; (80006f0 <main+0x10c>)
 8000668:	f001 fe02 	bl	8002270 <iprintf>
				int a = uart_getline(&USB_UART, in, size);
 800066c:	2203      	movs	r2, #3
 800066e:	a901      	add	r1, sp, #4
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <main+0x110>)
 8000672:	f000 f984 	bl	800097e <uart_getline>
 8000676:	4601      	mov	r1, r0
				printf("\r\nuart_getline result: %d\r\n", a);
 8000678:	481f      	ldr	r0, [pc, #124]	; (80006f8 <main+0x114>)
 800067a:	f001 fdf9 	bl	8002270 <iprintf>
        printf("Hello World!\r\n\n");
 800067e:	481f      	ldr	r0, [pc, #124]	; (80006fc <main+0x118>)
 8000680:	f001 fe92 	bl	80023a8 <puts>
        printf("( Welcome to Microprocessor Systems )\r\n\n\n");
 8000684:	481e      	ldr	r0, [pc, #120]	; (8000700 <main+0x11c>)
 8000686:	f001 fe8f 	bl	80023a8 <puts>
        printf("1=repeat, 2=clear, 0=quit.\r\n\n"); // Menu of choices
 800068a:	481e      	ldr	r0, [pc, #120]	; (8000704 <main+0x120>)
 800068c:	f001 fe8c 	bl	80023a8 <puts>
				choice = getchar();
 8000690:	f001 fccc 	bl	800202c <getchar>
 8000694:	b2c0      	uxtb	r0, r0
 8000696:	4c1c      	ldr	r4, [pc, #112]	; (8000708 <main+0x124>)
 8000698:	7020      	strb	r0, [r4, #0]
				putchar(choice);
 800069a:	f001 fe01 	bl	80022a0 <putchar>
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <main+0x128>)
 80006a0:	2220      	movs	r2, #32
 80006a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
        if (choice == '0')
 80006a6:	7823      	ldrb	r3, [r4, #0]
 80006a8:	2b30      	cmp	r3, #48	; 0x30
 80006aa:	d013      	beq.n	80006d4 <main+0xf0>
        else if(choice == '1')
 80006ac:	2b31      	cmp	r3, #49	; 0x31
 80006ae:	d0cd      	beq.n	800064c <main+0x68>
        else if(choice == '2')          // clear the screen with <ESC>[2J
 80006b0:	2b32      	cmp	r3, #50	; 0x32
 80006b2:	d0cf      	beq.n	8000654 <main+0x70>
            *GREENLEDBSRR = (uint32_t)0x0020U << 16; // Turn off Green LED (LED2)
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <main+0x128>)
 80006b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
            printf("\r\nA \"");
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <main+0x12c>)
 80006c0:	f001 fdd6 	bl	8002270 <iprintf>
						putchar(choice);
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <main+0x124>)
 80006c6:	7818      	ldrb	r0, [r3, #0]
 80006c8:	f001 fdea 	bl	80022a0 <putchar>
            printf("\" is not a valid choice.\r\n\n");
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <main+0x130>)
 80006ce:	f001 fe6b 	bl	80023a8 <puts>
 80006d2:	e7c7      	b.n	8000664 <main+0x80>
		}
}
 80006d4:	2001      	movs	r0, #1
 80006d6:	b002      	add	sp, #8
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	0800308c 	.word	0x0800308c
 80006e0:	2000000c 	.word	0x2000000c
 80006e4:	08003098 	.word	0x08003098
 80006e8:	40023800 	.word	0x40023800
 80006ec:	08003114 	.word	0x08003114
 80006f0:	08003150 	.word	0x08003150
 80006f4:	20000110 	.word	0x20000110
 80006f8:	080031b0 	.word	0x080031b0
 80006fc:	080030b8 	.word	0x080030b8
 8000700:	080030c8 	.word	0x080030c8
 8000704:	080030f4 	.word	0x080030f4
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40022000 	.word	0x40022000
 8000710:	0800312c 	.word	0x0800312c
 8000714:	08003134 	.word	0x08003134

08000718 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000718:	b500      	push	{lr}
 800071a:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800072e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000730:	2219      	movs	r2, #25
 8000732:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000734:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000738:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800073c:	2309      	movs	r3, #9
 800073e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000744:	4668      	mov	r0, sp
 8000746:	f000 fb55 	bl	8000df4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800074a:	b100      	cbz	r0, 800074e <SystemClock_Config+0x36>
    while(1) { ; }
 800074c:	e7fe      	b.n	800074c <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800074e:	f000 fb13 	bl	8000d78 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000752:	b100      	cbz	r0, 8000756 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000754:	e7fe      	b.n	8000754 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000756:	230f      	movs	r3, #15
 8000758:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800076e:	2107      	movs	r1, #7
 8000770:	a80d      	add	r0, sp, #52	; 0x34
 8000772:	f000 fdb3 	bl	80012dc <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000776:	b100      	cbz	r0, 800077a <SystemClock_Config+0x62>
    while(1) { ; }
 8000778:	e7fe      	b.n	8000778 <SystemClock_Config+0x60>
  }
}
 800077a:	b013      	add	sp, #76	; 0x4c
 800077c:	f85d fb04 	ldr.w	pc, [sp], #4

08000780 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000780:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000782:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000786:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <CPU_CACHE_Enable+0x7c>)
 800078c:	2100      	movs	r1, #0
 800078e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000796:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007aa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007ae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007b6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80007ba:	e000      	b.n	80007be <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80007bc:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007be:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007c6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80007ca:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80007ce:	490b      	ldr	r1, [pc, #44]	; (80007fc <CPU_CACHE_Enable+0x7c>)
 80007d0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80007d4:	4613      	mov	r3, r2
 80007d6:	3a01      	subs	r2, #1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f2      	bne.n	80007c2 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80007dc:	1e43      	subs	r3, r0, #1
 80007de:	2800      	cmp	r0, #0
 80007e0:	d1ec      	bne.n	80007bc <CPU_CACHE_Enable+0x3c>
 80007e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007e6:	694b      	ldr	r3, [r1, #20]
 80007e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ec:	614b      	str	r3, [r1, #20]
 80007ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007f2:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80007f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000800:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000802:	f7ff ffbd 	bl	8000780 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000806:	f000 f92d 	bl	8000a64 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800080a:	f7ff ff85 	bl	8000718 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800080e:	4a03      	ldr	r2, [pc, #12]	; (800081c <Sys_Init+0x1c>)
 8000810:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <Sys_Init+0x20>)
 8000816:	f000 f873 	bl	8000900 <initUart>
}
 800081a:	bd08      	pop	{r3, pc}
 800081c:	40011000 	.word	0x40011000
 8000820:	20000110 	.word	0x20000110

08000824 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000824:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000826:	f000 f933 	bl	8000a90 <HAL_IncTick>
}
 800082a:	bd08      	pop	{r3, pc}

0800082c <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000830:	6803      	ldr	r3, [r0, #0]
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <HAL_UART_MspInit+0xc0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d004      	beq.n	8000842 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000838:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <HAL_UART_MspInit+0xc4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d02c      	beq.n	8000898 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800083e:	b00b      	add	sp, #44	; 0x2c
 8000840:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000842:	4c2c      	ldr	r4, [pc, #176]	; (80008f4 <HAL_UART_MspInit+0xc8>)
 8000844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6323      	str	r3, [r4, #48]	; 0x30
 800084c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000868:	2307      	movs	r3, #7
 800086a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800086c:	4d22      	ldr	r5, [pc, #136]	; (80008f8 <HAL_UART_MspInit+0xcc>)
 800086e:	a905      	add	r1, sp, #20
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f98f 	bl	8000b94 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800087c:	a905      	add	r1, sp, #20
 800087e:	4628      	mov	r0, r5
 8000880:	f000 f988 	bl	8000b94 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000884:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6463      	str	r3, [r4, #68]	; 0x44
 800088c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	9b02      	ldr	r3, [sp, #8]
 8000896:	e7d2      	b.n	800083e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000898:	4c16      	ldr	r4, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xc8>)
 800089a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6323      	str	r3, [r4, #48]	; 0x30
 80008a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	9303      	str	r3, [sp, #12]
 80008aa:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80008bc:	2308      	movs	r3, #8
 80008be:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80008c0:	4d0e      	ldr	r5, [pc, #56]	; (80008fc <HAL_UART_MspInit+0xd0>)
 80008c2:	a905      	add	r1, sp, #20
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 f965 	bl	8000b94 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80008ce:	a905      	add	r1, sp, #20
 80008d0:	4628      	mov	r0, r5
 80008d2:	f000 f95f 	bl	8000b94 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80008d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6463      	str	r3, [r4, #68]	; 0x44
 80008de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	9304      	str	r3, [sp, #16]
 80008e6:	9b04      	ldr	r3, [sp, #16]
}
 80008e8:	e7a9      	b.n	800083e <HAL_UART_MspInit+0x12>
 80008ea:	bf00      	nop
 80008ec:	40011000 	.word	0x40011000
 80008f0:	40011400 	.word	0x40011400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000900:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000902:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000904:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	2200      	movs	r2, #0
 8000908:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800090a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800090c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800090e:	210c      	movs	r1, #12
 8000910:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000912:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000914:	f001 f973 	bl	8001bfe <HAL_UART_Init>
}
 8000918:	bd08      	pop	{r3, pc}
	...

0800091c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800091c:	b510      	push	{r4, lr}
 800091e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	b292      	uxth	r2, r2
 8000926:	4802      	ldr	r0, [pc, #8]	; (8000930 <_write+0x14>)
 8000928:	f001 f83c 	bl	80019a4 <HAL_UART_Transmit>
	return len;
}
 800092c:	4620      	mov	r0, r4
 800092e:	bd10      	pop	{r4, pc}
 8000930:	20000110 	.word	0x20000110

08000934 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000934:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000936:	2200      	movs	r2, #0
 8000938:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2201      	movs	r2, #1
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <_read+0x18>)
 8000942:	f001 f898 	bl	8001a76 <HAL_UART_Receive>
	return len;
}
 8000946:	2001      	movs	r0, #1
 8000948:	bd08      	pop	{r3, pc}
 800094a:	bf00      	nop
 800094c:	20000110 	.word	0x20000110

08000950 <uart_getchar>:
    HAL_UART_Transmit(huart, (uint8_t*) string, strlen((const char*)string), 1000);
}

// Get one character
// 'echo' means enable (1) or disable (0) echoing of characters
char uart_getchar(UART_HandleTypeDef *huart, uint8_t echo) {
 8000950:	b530      	push	{r4, r5, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	4605      	mov	r5, r0
 8000956:	460c      	mov	r4, r1
	char input[1];
	HAL_UART_Receive(huart, (uint8_t *)input, 1, HAL_MAX_DELAY);
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	2201      	movs	r2, #1
 800095e:	a901      	add	r1, sp, #4
 8000960:	f001 f889 	bl	8001a76 <HAL_UART_Receive>
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 8000964:	b91c      	cbnz	r4, 800096e <uart_getchar+0x1e>
	return (char)input[0];
}
 8000966:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800096a:	b003      	add	sp, #12
 800096c:	bd30      	pop	{r4, r5, pc}
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	2201      	movs	r2, #1
 8000974:	a901      	add	r1, sp, #4
 8000976:	4628      	mov	r0, r5
 8000978:	f001 f814 	bl	80019a4 <HAL_UART_Transmit>
 800097c:	e7f3      	b.n	8000966 <uart_getchar+0x16>

0800097e <uart_getline>:

// Collects characters until size limit or an endline is recieved
// Returns number of characters collected
// 'max size' should match the size of the array or be smaller
int uart_getline(UART_HandleTypeDef *huart, char * input, int max_size)
{
 800097e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000980:	4606      	mov	r6, r0
 8000982:	460f      	mov	r7, r1
 8000984:	4615      	mov	r5, r2
  char single;
  int i = 0;
 8000986:	2400      	movs	r4, #0
 8000988:	e001      	b.n	800098e <uart_getline+0x10>
		single = uart_getchar(huart, 1); // Get one character

  	if (single == '\n' || single == '\r') // Unix & co. use \n, Windows uses \r\n
			break;
  	else
			input[i] = single;
 800098a:	5538      	strb	r0, [r7, r4]
  	i++;
 800098c:	3401      	adds	r4, #1
		if (i > max_size)
 800098e:	42ac      	cmp	r4, r5
 8000990:	dc07      	bgt.n	80009a2 <uart_getline+0x24>
		single = uart_getchar(huart, 1); // Get one character
 8000992:	2101      	movs	r1, #1
 8000994:	4630      	mov	r0, r6
 8000996:	f7ff ffdb 	bl	8000950 <uart_getchar>
  	if (single == '\n' || single == '\r') // Unix & co. use \n, Windows uses \r\n
 800099a:	280d      	cmp	r0, #13
 800099c:	bf18      	it	ne
 800099e:	280a      	cmpne	r0, #10
 80009a0:	d1f3      	bne.n	800098a <uart_getline+0xc>
	}
  return i; // The way this is set up, it will always report the wrong size
}
 80009a2:	4620      	mov	r0, r4
 80009a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d2:	f000 f813 	bl	80009fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009d6:	f001 fb3b 	bl	8002050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fe03 	bl	80005e4 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009ec:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 80009f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009f4:	200001a8 	.word	0x200001a8

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SystemInit+0x18>)
 80009fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a02:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_InitTick+0x40>)
 8000a22:	7818      	ldrb	r0, [r3, #0]
 8000a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a28:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <HAL_InitTick+0x44>)
 8000a2e:	6810      	ldr	r0, [r2, #0]
 8000a30:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a34:	f000 f89a 	bl	8000b6c <HAL_SYSTICK_Config>
 8000a38:	b968      	cbnz	r0, 8000a56 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	2c0f      	cmp	r4, #15
 8000a3c:	d901      	bls.n	8000a42 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a3e:	2001      	movs	r0, #1
 8000a40:	e00a      	b.n	8000a58 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a42:	2200      	movs	r2, #0
 8000a44:	4621      	mov	r1, r4
 8000a46:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4a:	f000 f859 	bl	8000b00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_InitTick+0x40>)
 8000a50:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2000      	movs	r0, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
}
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_Init>:
{
 8000a64:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_Init+0x28>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a76:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f82f 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f7ff ffcc 	bl	8000a1c <HAL_InitTick>
  HAL_MspInit();
 8000a84:	f7ff ffc8 	bl	8000a18 <HAL_MspInit>
}
 8000a88:	2000      	movs	r0, #0
 8000a8a:	bd08      	pop	{r3, pc}
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x10>)
 8000a92:	6811      	ldr	r1, [r2, #0]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_IncTick+0x14>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	440b      	add	r3, r1
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000190 	.word	0x20000190
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aa8:	4b01      	ldr	r3, [pc, #4]	; (8000ab0 <HAL_GetTick+0x8>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000190 	.word	0x20000190

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b538      	push	{r3, r4, r5, lr}
 8000ab6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff6 	bl	8000aa8 <HAL_GetTick>
 8000abc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ac2:	d002      	beq.n	8000aca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_Delay+0x24>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aca:	f7ff ffed 	bl	8000aa8 <HAL_GetTick>
 8000ace:	1b40      	subs	r0, r0, r5
 8000ad0:	42a0      	cmp	r0, r4
 8000ad2:	d3fa      	bcc.n	8000aca <HAL_Delay+0x16>
  {
  }
}
 8000ad4:	bd38      	pop	{r3, r4, r5, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000ade:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae4:	041b      	lsls	r3, r3, #16
 8000ae6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	0200      	lsls	r0, r0, #8
 8000aea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000af4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	05fa0000 	.word	0x05fa0000

08000b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b00:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_NVIC_SetPriority+0x60>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0a:	f1c3 0c07 	rsb	ip, r3, #7
 8000b0e:	f1bc 0f04 	cmp.w	ip, #4
 8000b12:	bf28      	it	cs
 8000b14:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b18:	f103 0e04 	add.w	lr, r3, #4
 8000b1c:	f1be 0f06 	cmp.w	lr, #6
 8000b20:	d914      	bls.n	8000b4c <HAL_NVIC_SetPriority+0x4c>
 8000b22:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 3eff 	mov.w	lr, #4294967295
 8000b28:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000b2c:	ea21 010c 	bic.w	r1, r1, ip
 8000b30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b32:	fa0e f303 	lsl.w	r3, lr, r3
 8000b36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	db07      	blt.n	8000b50 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	0109      	lsls	r1, r1, #4
 8000b42:	b2c9      	uxtb	r1, r1
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_NVIC_SetPriority+0x64>)
 8000b46:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b48:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e7e9      	b.n	8000b24 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	f000 000f 	and.w	r0, r0, #15
 8000b54:	0109      	lsls	r1, r1, #4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_NVIC_SetPriority+0x68>)
 8000b5a:	5419      	strb	r1, [r3, r0]
 8000b5c:	e7f4      	b.n	8000b48 <HAL_NVIC_SetPriority+0x48>
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	e000e400 	.word	0xe000e400
 8000b68:	e000ed14 	.word	0xe000ed14

08000b6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b72:	d20b      	bcs.n	8000b8c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b78:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <HAL_SYSTICK_Config+0x24>)
 8000b7c:	21f0      	movs	r1, #240	; 0xf0
 8000b7e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b82:	2000      	movs	r0, #0
 8000b84:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	2207      	movs	r2, #7
 8000b88:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b8c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	f200 80e4 	bhi.w	8000d64 <HAL_GPIO_Init+0x1d0>
{
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	e03a      	b.n	8000c18 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ba2:	2209      	movs	r2, #9
 8000ba4:	e000      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	40aa      	lsls	r2, r5
 8000baa:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bac:	3402      	adds	r4, #2
 8000bae:	4d6e      	ldr	r5, [pc, #440]	; (8000d68 <HAL_GPIO_Init+0x1d4>)
 8000bb0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb4:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <HAL_GPIO_Init+0x1d8>)
 8000bb6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bb8:	ea6f 020c 	mvn.w	r2, ip
 8000bbc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	684e      	ldr	r6, [r1, #4]
 8000bc2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000bc6:	d001      	beq.n	8000bcc <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000bc8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000bcc:	4c67      	ldr	r4, [pc, #412]	; (8000d6c <HAL_GPIO_Init+0x1d8>)
 8000bce:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000bd0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd6:	684e      	ldr	r6, [r1, #4]
 8000bd8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000bdc:	d001      	beq.n	8000be2 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000bde:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000be2:	4c62      	ldr	r4, [pc, #392]	; (8000d6c <HAL_GPIO_Init+0x1d8>)
 8000be4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bec:	684e      	ldr	r6, [r1, #4]
 8000bee:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000bf2:	d001      	beq.n	8000bf8 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000bf4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000bf8:	4c5c      	ldr	r4, [pc, #368]	; (8000d6c <HAL_GPIO_Init+0x1d8>)
 8000bfa:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000bfc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bfe:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	684d      	ldr	r5, [r1, #4]
 8000c02:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000c06:	d001      	beq.n	8000c0c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000c08:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000c0c:	4c57      	ldr	r4, [pc, #348]	; (8000d6c <HAL_GPIO_Init+0x1d8>)
 8000c0e:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c10:	3301      	adds	r3, #1
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	f200 80a4 	bhi.w	8000d60 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1c:	680c      	ldr	r4, [r1, #0]
 8000c1e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c22:	ea32 0404 	bics.w	r4, r2, r4
 8000c26:	d1f3      	bne.n	8000c10 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c28:	684c      	ldr	r4, [r1, #4]
 8000c2a:	1e65      	subs	r5, r4, #1
 8000c2c:	2c11      	cmp	r4, #17
 8000c2e:	bf18      	it	ne
 8000c30:	2d01      	cmpne	r5, #1
 8000c32:	d901      	bls.n	8000c38 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	2c12      	cmp	r4, #18
 8000c36:	d112      	bne.n	8000c5e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8000c38:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c3a:	005e      	lsls	r6, r3, #1
 8000c3c:	2403      	movs	r4, #3
 8000c3e:	40b4      	lsls	r4, r6
 8000c40:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c44:	68cc      	ldr	r4, [r1, #12]
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000c4a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c4c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c52:	684c      	ldr	r4, [r1, #4]
 8000c54:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000c5c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c5e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c64:	2403      	movs	r4, #3
 8000c66:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c6a:	43e2      	mvns	r2, r4
 8000c6c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c70:	688c      	ldr	r4, [r1, #8]
 8000c72:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c76:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000c78:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7a:	684c      	ldr	r4, [r1, #4]
 8000c7c:	2c12      	cmp	r4, #18
 8000c7e:	bf18      	it	ne
 8000c80:	2c02      	cmpne	r4, #2
 8000c82:	d10f      	bne.n	8000ca4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000c84:	08dd      	lsrs	r5, r3, #3
 8000c86:	3508      	adds	r5, #8
 8000c88:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c8c:	f003 0407 	and.w	r4, r3, #7
 8000c90:	00a6      	lsls	r6, r4, #2
 8000c92:	240f      	movs	r4, #15
 8000c94:	40b4      	lsls	r4, r6
 8000c96:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c9a:	690c      	ldr	r4, [r1, #16]
 8000c9c:	40b4      	lsls	r4, r6
 8000c9e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000ca0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000ca4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ca6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ca8:	684a      	ldr	r2, [r1, #4]
 8000caa:	f002 0203 	and.w	r2, r2, #3
 8000cae:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cb2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000cb4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb6:	684a      	ldr	r2, [r1, #4]
 8000cb8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cbc:	d0a8      	beq.n	8000c10 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x1dc>)
 8000cc0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000cc2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000cc6:	6454      	str	r4, [r2, #68]	; 0x44
 8000cc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cd2:	089c      	lsrs	r4, r3, #2
 8000cd4:	1ca5      	adds	r5, r4, #2
 8000cd6:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <HAL_GPIO_Init+0x1d4>)
 8000cd8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cdc:	f003 0203 	and.w	r2, r3, #3
 8000ce0:	0095      	lsls	r5, r2, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	40aa      	lsls	r2, r5
 8000ce6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_GPIO_Init+0x1e0>)
 8000cec:	4290      	cmp	r0, r2
 8000cee:	f43f af5a 	beq.w	8000ba6 <HAL_GPIO_Init+0x12>
 8000cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d022      	beq.n	8000d40 <HAL_GPIO_Init+0x1ac>
 8000cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d020      	beq.n	8000d44 <HAL_GPIO_Init+0x1b0>
 8000d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d01e      	beq.n	8000d48 <HAL_GPIO_Init+0x1b4>
 8000d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d01c      	beq.n	8000d4c <HAL_GPIO_Init+0x1b8>
 8000d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d01a      	beq.n	8000d50 <HAL_GPIO_Init+0x1bc>
 8000d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d018      	beq.n	8000d54 <HAL_GPIO_Init+0x1c0>
 8000d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d016      	beq.n	8000d58 <HAL_GPIO_Init+0x1c4>
 8000d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d014      	beq.n	8000d5c <HAL_GPIO_Init+0x1c8>
 8000d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d36:	4290      	cmp	r0, r2
 8000d38:	f43f af33 	beq.w	8000ba2 <HAL_GPIO_Init+0xe>
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	e733      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d40:	2201      	movs	r2, #1
 8000d42:	e731      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d44:	2202      	movs	r2, #2
 8000d46:	e72f      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d48:	2203      	movs	r2, #3
 8000d4a:	e72d      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	e72b      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d50:	2205      	movs	r2, #5
 8000d52:	e729      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d54:	2206      	movs	r2, #6
 8000d56:	e727      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d58:	2207      	movs	r2, #7
 8000d5a:	e725      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	e723      	b.n	8000ba8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d60:	b003      	add	sp, #12
 8000d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40013c00 	.word	0x40013c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_PWREx_EnableOverDrive+0x74>)
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d9a:	f7ff fe85 	bl	8000aa8 <HAL_GetTick>
 8000d9e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000da8:	d108      	bne.n	8000dbc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000daa:	f7ff fe7d 	bl	8000aa8 <HAL_GetTick>
 8000dae:	1b00      	subs	r0, r0, r4
 8000db0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000db4:	d9f4      	bls.n	8000da0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000db8:	b002      	add	sp, #8
 8000dba:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000dbe:	6813      	ldr	r3, [r2, #0]
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000dc6:	f7ff fe6f 	bl	8000aa8 <HAL_GetTick>
 8000dca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dd4:	d107      	bne.n	8000de6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dd6:	f7ff fe67 	bl	8000aa8 <HAL_GetTick>
 8000dda:	1b00      	subs	r0, r0, r4
 8000ddc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000de0:	d9f4      	bls.n	8000dcc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000de2:	2003      	movs	r0, #3
 8000de4:	e7e8      	b.n	8000db8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000de6:	2000      	movs	r0, #0
 8000de8:	e7e6      	b.n	8000db8 <HAL_PWREx_EnableOverDrive+0x40>
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df4:	2800      	cmp	r0, #0
 8000df6:	f000 8206 	beq.w	8001206 <HAL_RCC_OscConfig+0x412>
{
 8000dfa:	b570      	push	{r4, r5, r6, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e00:	6803      	ldr	r3, [r0, #0]
 8000e02:	f013 0f01 	tst.w	r3, #1
 8000e06:	d029      	beq.n	8000e5c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	4b95      	ldr	r3, [pc, #596]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d01a      	beq.n	8000e4a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e14:	4b92      	ldr	r3, [pc, #584]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d00f      	beq.n	8000e40 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e26:	d040      	beq.n	8000eaa <HAL_RCC_OscConfig+0xb6>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d154      	bne.n	8000ed6 <HAL_RCC_OscConfig+0xe2>
 8000e2c:	4b8c      	ldr	r3, [pc, #560]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e039      	b.n	8000eb4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e40:	4b87      	ldr	r3, [pc, #540]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e48:	d0ea      	beq.n	8000e20 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	4b85      	ldr	r3, [pc, #532]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e52:	d003      	beq.n	8000e5c <HAL_RCC_OscConfig+0x68>
 8000e54:	6863      	ldr	r3, [r4, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 81d7 	beq.w	800120a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	f013 0f02 	tst.w	r3, #2
 8000e62:	d074      	beq.n	8000f4e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e64:	4b7e      	ldr	r3, [pc, #504]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f013 0f0c 	tst.w	r3, #12
 8000e6c:	d05e      	beq.n	8000f2c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6e:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d053      	beq.n	8000f22 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e7a:	68e3      	ldr	r3, [r4, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 8089 	beq.w	8000f94 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e82:	4a77      	ldr	r2, [pc, #476]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fe0c 	bl	8000aa8 <HAL_GetTick>
 8000e90:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f013 0f02 	tst.w	r3, #2
 8000e9a:	d172      	bne.n	8000f82 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fe04 	bl	8000aa8 <HAL_GetTick>
 8000ea0:	1b40      	subs	r0, r0, r5
 8000ea2:	2802      	cmp	r0, #2
 8000ea4:	d9f5      	bls.n	8000e92 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	e1b4      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	6813      	ldr	r3, [r2, #0]
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb4:	6863      	ldr	r3, [r4, #4]
 8000eb6:	b32b      	cbz	r3, 8000f04 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fdf6 	bl	8000aa8 <HAL_GetTick>
 8000ebc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	4b68      	ldr	r3, [pc, #416]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ec6:	d1c9      	bne.n	8000e5c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fdee 	bl	8000aa8 <HAL_GetTick>
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	2864      	cmp	r0, #100	; 0x64
 8000ed0:	d9f5      	bls.n	8000ebe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	e19e      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eda:	d009      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xfc>
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e7e1      	b.n	8000eb4 <HAL_RCC_OscConfig+0xc0>
 8000ef0:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e7d7      	b.n	8000eb4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000f04:	f7ff fdd0 	bl	8000aa8 <HAL_GetTick>
 8000f08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f12:	d0a3      	beq.n	8000e5c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fdc8 	bl	8000aa8 <HAL_GetTick>
 8000f18:	1b40      	subs	r0, r0, r5
 8000f1a:	2864      	cmp	r0, #100	; 0x64
 8000f1c:	d9f5      	bls.n	8000f0a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e178      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f22:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f2a:	d1a6      	bne.n	8000e7a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f013 0f02 	tst.w	r3, #2
 8000f34:	d003      	beq.n	8000f3e <HAL_RCC_OscConfig+0x14a>
 8000f36:	68e3      	ldr	r3, [r4, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 8168 	bne.w	800120e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	6813      	ldr	r3, [r2, #0]
 8000f42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f46:	6921      	ldr	r1, [r4, #16]
 8000f48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f4c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f013 0f08 	tst.w	r3, #8
 8000f54:	d046      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f56:	6963      	ldr	r3, [r4, #20]
 8000f58:	b383      	cbz	r3, 8000fbc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5a:	4a41      	ldr	r2, [pc, #260]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f64:	f7ff fda0 	bl	8000aa8 <HAL_GetTick>
 8000f68:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f6e:	f013 0f02 	tst.w	r3, #2
 8000f72:	d137      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fd98 	bl	8000aa8 <HAL_GetTick>
 8000f78:	1b40      	subs	r0, r0, r5
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d9f5      	bls.n	8000f6a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000f7e:	2003      	movs	r0, #3
 8000f80:	e148      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4a37      	ldr	r2, [pc, #220]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f8a:	6921      	ldr	r1, [r4, #16]
 8000f8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e7dc      	b.n	8000f4e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fd83 	bl	8000aa8 <HAL_GetTick>
 8000fa2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f013 0f02 	tst.w	r3, #2
 8000fac:	d0cf      	beq.n	8000f4e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fd7b 	bl	8000aa8 <HAL_GetTick>
 8000fb2:	1b40      	subs	r0, r0, r5
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f5      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000fb8:	2003      	movs	r0, #3
 8000fba:	e12b      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fd6f 	bl	8000aa8 <HAL_GetTick>
 8000fca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fd0:	f013 0f02 	tst.w	r3, #2
 8000fd4:	d006      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fd67 	bl	8000aa8 <HAL_GetTick>
 8000fda:	1b40      	subs	r0, r0, r5
 8000fdc:	2802      	cmp	r0, #2
 8000fde:	d9f5      	bls.n	8000fcc <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	e117      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	f013 0f04 	tst.w	r3, #4
 8000fea:	d07d      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ff4:	d11e      	bne.n	8001034 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800100a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001014:	d010      	beq.n	8001038 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	68a3      	ldr	r3, [r4, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d025      	beq.n	8001068 <HAL_RCC_OscConfig+0x274>
 800101c:	2b00      	cmp	r3, #0
 800101e:	d13b      	bne.n	8001098 <HAL_RCC_OscConfig+0x2a4>
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_RCC_OscConfig+0x26c>)
 8001022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	671a      	str	r2, [r3, #112]	; 0x70
 800102a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800102c:	f022 0204 	bic.w	r2, r2, #4
 8001030:	671a      	str	r2, [r3, #112]	; 0x70
 8001032:	e01e      	b.n	8001072 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001034:	2500      	movs	r5, #0
 8001036:	e7e9      	b.n	800100c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_RCC_OscConfig+0x270>)
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001042:	f7ff fd31 	bl	8000aa8 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_RCC_OscConfig+0x270>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001050:	d1e1      	bne.n	8001016 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001052:	f7ff fd29 	bl	8000aa8 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2864      	cmp	r0, #100	; 0x64
 800105a:	d9f5      	bls.n	8001048 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e0d9      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	4a72      	ldr	r2, [pc, #456]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 800106a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001072:	68a3      	ldr	r3, [r4, #8]
 8001074:	b333      	cbz	r3, 80010c4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff fd17 	bl	8000aa8 <HAL_GetTick>
 800107a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 800107e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001080:	f013 0f02 	tst.w	r3, #2
 8001084:	d12f      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fd0f 	bl	8000aa8 <HAL_GetTick>
 800108a:	1b80      	subs	r0, r0, r6
 800108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001090:	4298      	cmp	r0, r3
 8001092:	d9f3      	bls.n	800107c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001094:	2003      	movs	r0, #3
 8001096:	e0bd      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	2b05      	cmp	r3, #5
 800109a:	d009      	beq.n	80010b0 <HAL_RCC_OscConfig+0x2bc>
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 800109e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	671a      	str	r2, [r3, #112]	; 0x70
 80010a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010a8:	f022 0204 	bic.w	r2, r2, #4
 80010ac:	671a      	str	r2, [r3, #112]	; 0x70
 80010ae:	e7e0      	b.n	8001072 <HAL_RCC_OscConfig+0x27e>
 80010b0:	4b60      	ldr	r3, [pc, #384]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 80010b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b4:	f042 0204 	orr.w	r2, r2, #4
 80010b8:	671a      	str	r2, [r3, #112]	; 0x70
 80010ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	671a      	str	r2, [r3, #112]	; 0x70
 80010c2:	e7d6      	b.n	8001072 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c4:	f7ff fcf0 	bl	8000aa8 <HAL_GetTick>
 80010c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 80010cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ce:	f013 0f02 	tst.w	r3, #2
 80010d2:	d008      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d4:	f7ff fce8 	bl	8000aa8 <HAL_GetTick>
 80010d8:	1b80      	subs	r0, r0, r6
 80010da:	f241 3388 	movw	r3, #5000	; 0x1388
 80010de:	4298      	cmp	r0, r3
 80010e0:	d9f3      	bls.n	80010ca <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e096      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010e6:	b9fd      	cbnz	r5, 8001128 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e8:	69a3      	ldr	r3, [r4, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8091 	beq.w	8001212 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f0:	4a50      	ldr	r2, [pc, #320]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 80010f2:	6892      	ldr	r2, [r2, #8]
 80010f4:	f002 020c 	and.w	r2, r2, #12
 80010f8:	2a08      	cmp	r2, #8
 80010fa:	d059      	beq.n	80011b0 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d019      	beq.n	8001134 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001100:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fccd 	bl	8000aa8 <HAL_GetTick>
 800110e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001118:	d048      	beq.n	80011ac <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fcc5 	bl	8000aa8 <HAL_GetTick>
 800111e:	1b00      	subs	r0, r0, r4
 8001120:	2802      	cmp	r0, #2
 8001122:	d9f5      	bls.n	8001110 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001124:	2003      	movs	r0, #3
 8001126:	e075      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001128:	4a42      	ldr	r2, [pc, #264]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 800112a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800112c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	e7d9      	b.n	80010e8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001134:	4a3f      	ldr	r2, [pc, #252]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800113c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff fcb3 	bl	8000aa8 <HAL_GetTick>
 8001142:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800114c:	d006      	beq.n	800115c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fcab 	bl	8000aa8 <HAL_GetTick>
 8001152:	1b40      	subs	r0, r0, r5
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001158:	2003      	movs	r0, #3
 800115a:	e05b      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115c:	69e3      	ldr	r3, [r4, #28]
 800115e:	6a22      	ldr	r2, [r4, #32]
 8001160:	4313      	orrs	r3, r2
 8001162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001164:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001168:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800116a:	0852      	lsrs	r2, r2, #1
 800116c:	3a01      	subs	r2, #1
 800116e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001174:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001178:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800117a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001180:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001188:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800118a:	f7ff fc8d 	bl	8000aa8 <HAL_GetTick>
 800118e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fc85 	bl	8000aa8 <HAL_GetTick>
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f5      	bls.n	8001190 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
 80011a6:	e035      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80011a8:	2000      	movs	r0, #0
 80011aa:	e033      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 80011ac:	2000      	movs	r0, #0
 80011ae:	e031      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_RCC_OscConfig+0x440>)
 80011b2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d02f      	beq.n	8001218 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80011bc:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011be:	428b      	cmp	r3, r1
 80011c0:	d12c      	bne.n	800121c <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011c2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80011c6:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c8:	428b      	cmp	r3, r1
 80011ca:	d129      	bne.n	8001220 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011d2:	4013      	ands	r3, r2
 80011d4:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80011d8:	d124      	bne.n	8001224 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011da:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80011de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80011e8:	d11e      	bne.n	8001228 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011ea:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80011ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011f0:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80011f4:	d11a      	bne.n	800122c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80011f6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80011fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011fc:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001202:	2000      	movs	r0, #0
 8001204:	e006      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
}
 8001208:	4770      	bx	lr
        return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e002      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e000      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
}
 8001214:	b002      	add	sp, #8
 8001216:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e7fb      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 800121c:	2001      	movs	r0, #1
 800121e:	e7f9      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001220:	2001      	movs	r0, #1
 8001222:	e7f7      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001224:	2001      	movs	r0, #1
 8001226:	e7f5      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001228:	2001      	movs	r0, #1
 800122a:	e7f3      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 800122c:	2001      	movs	r0, #1
 800122e:	e7f1      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001230:	2001      	movs	r0, #1
 8001232:	e7ef      	b.n	8001214 <HAL_RCC_OscConfig+0x420>
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001238:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d03f      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x8e>
 8001246:	2b08      	cmp	r3, #8
 8001248:	d13f      	bne.n	80012ca <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001258:	d012      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800125c:	6859      	ldr	r1, [r3, #4]
 800125e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001264:	2300      	movs	r3, #0
 8001266:	fba1 0100 	umull	r0, r1, r1, r0
 800126a:	f7ff f839 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001276:	3301      	adds	r3, #1
 8001278:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800127a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800127e:	e025      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001288:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800128c:	ebb1 000c 	subs.w	r0, r1, ip
 8001290:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001294:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001298:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800129c:	0181      	lsls	r1, r0, #6
 800129e:	1a09      	subs	r1, r1, r0
 80012a0:	eb63 030e 	sbc.w	r3, r3, lr
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012aa:	00c9      	lsls	r1, r1, #3
 80012ac:	eb11 0c0c 	adds.w	ip, r1, ip
 80012b0:	f143 0300 	adc.w	r3, r3, #0
 80012b4:	0299      	lsls	r1, r3, #10
 80012b6:	2300      	movs	r3, #0
 80012b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80012bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80012c0:	f7ff f80e 	bl	80002e0 <__aeabi_uldivmod>
 80012c4:	e7d3      	b.n	800126e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012c8:	e000      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	017d7840 	.word	0x017d7840
 80012d8:	00f42400 	.word	0x00f42400

080012dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012dc:	2800      	cmp	r0, #0
 80012de:	f000 80a0 	beq.w	8001422 <HAL_RCC_ClockConfig+0x146>
{
 80012e2:	b570      	push	{r4, r5, r6, lr}
 80012e4:	460d      	mov	r5, r1
 80012e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e8:	4b52      	ldr	r3, [pc, #328]	; (8001434 <HAL_RCC_ClockConfig+0x158>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d20b      	bcs.n	800130c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <HAL_RCC_ClockConfig+0x158>)
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f023 030f 	bic.w	r3, r3, #15
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	428b      	cmp	r3, r1
 8001308:	f040 808d 	bne.w	8001426 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	f013 0f02 	tst.w	r3, #2
 8001312:	d017      	beq.n	8001344 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	f013 0f04 	tst.w	r3, #4
 8001318:	d004      	beq.n	8001324 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131a:	4a47      	ldr	r2, [pc, #284]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001322:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	f013 0f08 	tst.w	r3, #8
 800132a:	d004      	beq.n	8001336 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800132c:	4a42      	ldr	r2, [pc, #264]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 800132e:	6893      	ldr	r3, [r2, #8]
 8001330:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001334:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001338:	6893      	ldr	r3, [r2, #8]
 800133a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800133e:	68a1      	ldr	r1, [r4, #8]
 8001340:	430b      	orrs	r3, r1
 8001342:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	f013 0f01 	tst.w	r3, #1
 800134a:	d031      	beq.n	80013b0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d020      	beq.n	8001394 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001352:	2b02      	cmp	r3, #2
 8001354:	d025      	beq.n	80013a2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	4a38      	ldr	r2, [pc, #224]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f012 0f02 	tst.w	r2, #2
 800135e:	d064      	beq.n	800142a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001362:	688a      	ldr	r2, [r1, #8]
 8001364:	f022 0203 	bic.w	r2, r2, #3
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800136c:	f7ff fb9c 	bl	8000aa8 <HAL_GetTick>
 8001370:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	6862      	ldr	r2, [r4, #4]
 800137c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001380:	d016      	beq.n	80013b0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001382:	f7ff fb91 	bl	8000aa8 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	f241 3388 	movw	r3, #5000	; 0x1388
 800138c:	4298      	cmp	r0, r3
 800138e:	d9f0      	bls.n	8001372 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001390:	2003      	movs	r0, #3
 8001392:	e045      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800139c:	d1e0      	bne.n	8001360 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e03e      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013aa:	d1d9      	bne.n	8001360 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e037      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_RCC_ClockConfig+0x158>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	42ab      	cmp	r3, r5
 80013ba:	d90a      	bls.n	80013d2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_RCC_ClockConfig+0x158>)
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	432b      	orrs	r3, r5
 80013c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c8:	6813      	ldr	r3, [r2, #0]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d12d      	bne.n	800142e <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f013 0f04 	tst.w	r3, #4
 80013d8:	d006      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80013dc:	6893      	ldr	r3, [r2, #8]
 80013de:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013e2:	68e1      	ldr	r1, [r4, #12]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	f013 0f08 	tst.w	r3, #8
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 80013f2:	6893      	ldr	r3, [r2, #8]
 80013f4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013f8:	6921      	ldr	r1, [r4, #16]
 80013fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013fe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001400:	f7ff ff1a 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_RCC_ClockConfig+0x15c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_RCC_ClockConfig+0x160>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	40d8      	lsrs	r0, r3
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x164>)
 8001414:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_ClockConfig+0x168>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff faff 	bl	8000a1c <HAL_InitTick>
  return HAL_OK;
 800141e:	2000      	movs	r0, #0
}
 8001420:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
}
 8001424:	4770      	bx	lr
      return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e7fa      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e7f8      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
 8001430:	e7f6      	b.n	8001420 <HAL_RCC_ClockConfig+0x144>
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00
 8001438:	40023800 	.word	0x40023800
 800143c:	08003074 	.word	0x08003074
 8001440:	20000000 	.word	0x20000000
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_RCC_GetHCLKFreq+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001456:	f7ff fff7 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_RCC_GetPCLK1Freq+0x18>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001462:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
}
 8001466:	40d8      	lsrs	r0, r3
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	08003084 	.word	0x08003084

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001476:	f7ff ffe7 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_RCC_GetPCLK2Freq+0x18>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
}
 8001486:	40d8      	lsrs	r0, r3
 8001488:	bd08      	pop	{r3, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	08003084 	.word	0x08003084

08001494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001498:	6883      	ldr	r3, [r0, #8]
 800149a:	6902      	ldr	r2, [r0, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	6942      	ldr	r2, [r0, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	69c2      	ldr	r2, [r0, #28]
 80014a4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014a6:	6801      	ldr	r1, [r0, #0]
 80014a8:	6808      	ldr	r0, [r1, #0]
 80014aa:	4a93      	ldr	r2, [pc, #588]	; (80016f8 <UART_SetConfig+0x264>)
 80014ac:	4002      	ands	r2, r0
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	6853      	ldr	r3, [r2, #4]
 80014b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ba:	68e1      	ldr	r1, [r4, #12]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80014c0:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80014c2:	6a23      	ldr	r3, [r4, #32]
 80014c4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014c6:	6821      	ldr	r1, [r4, #0]
 80014c8:	688b      	ldr	r3, [r1, #8]
 80014ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	4a89      	ldr	r2, [pc, #548]	; (80016fc <UART_SetConfig+0x268>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <UART_SetConfig+0x7a>
 80014da:	4a89      	ldr	r2, [pc, #548]	; (8001700 <UART_SetConfig+0x26c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d029      	beq.n	8001534 <UART_SetConfig+0xa0>
 80014e0:	4a88      	ldr	r2, [pc, #544]	; (8001704 <UART_SetConfig+0x270>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d03e      	beq.n	8001564 <UART_SetConfig+0xd0>
 80014e6:	4a88      	ldr	r2, [pc, #544]	; (8001708 <UART_SetConfig+0x274>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d062      	beq.n	80015b2 <UART_SetConfig+0x11e>
 80014ec:	4a87      	ldr	r2, [pc, #540]	; (800170c <UART_SetConfig+0x278>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d071      	beq.n	80015d6 <UART_SetConfig+0x142>
 80014f2:	4a87      	ldr	r2, [pc, #540]	; (8001710 <UART_SetConfig+0x27c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	f000 8083 	beq.w	8001600 <UART_SetConfig+0x16c>
 80014fa:	4a86      	ldr	r2, [pc, #536]	; (8001714 <UART_SetConfig+0x280>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f000 8094 	beq.w	800162a <UART_SetConfig+0x196>
 8001502:	4a85      	ldr	r2, [pc, #532]	; (8001718 <UART_SetConfig+0x284>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f000 80a5 	beq.w	8001654 <UART_SetConfig+0x1c0>
 800150a:	2510      	movs	r5, #16
 800150c:	e03a      	b.n	8001584 <UART_SetConfig+0xf0>
 800150e:	4b83      	ldr	r3, [pc, #524]	; (800171c <UART_SetConfig+0x288>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d809      	bhi.n	8001530 <UART_SetConfig+0x9c>
 800151c:	e8df f003 	tbb	[pc, r3]
 8001520:	06ae0402 	.word	0x06ae0402
 8001524:	2501      	movs	r5, #1
 8001526:	e02d      	b.n	8001584 <UART_SetConfig+0xf0>
 8001528:	2504      	movs	r5, #4
 800152a:	e02b      	b.n	8001584 <UART_SetConfig+0xf0>
 800152c:	2508      	movs	r5, #8
 800152e:	e029      	b.n	8001584 <UART_SetConfig+0xf0>
 8001530:	2510      	movs	r5, #16
 8001532:	e027      	b.n	8001584 <UART_SetConfig+0xf0>
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <UART_SetConfig+0x288>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d80e      	bhi.n	8001560 <UART_SetConfig+0xcc>
 8001542:	e8df f003 	tbb	[pc, r3]
 8001546:	0d07      	.short	0x0d07
 8001548:	0d090d0d 	.word	0x0d090d0d
 800154c:	0d9d0d0d 	.word	0x0d9d0d0d
 8001550:	0d0d      	.short	0x0d0d
 8001552:	0b          	.byte	0x0b
 8001553:	00          	.byte	0x00
 8001554:	2500      	movs	r5, #0
 8001556:	e015      	b.n	8001584 <UART_SetConfig+0xf0>
 8001558:	2504      	movs	r5, #4
 800155a:	e013      	b.n	8001584 <UART_SetConfig+0xf0>
 800155c:	2508      	movs	r5, #8
 800155e:	e011      	b.n	8001584 <UART_SetConfig+0xf0>
 8001560:	2510      	movs	r5, #16
 8001562:	e00f      	b.n	8001584 <UART_SetConfig+0xf0>
 8001564:	4b6d      	ldr	r3, [pc, #436]	; (800171c <UART_SetConfig+0x288>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800156e:	2b20      	cmp	r3, #32
 8001570:	f000 8088 	beq.w	8001684 <UART_SetConfig+0x1f0>
 8001574:	d819      	bhi.n	80015aa <UART_SetConfig+0x116>
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8086 	beq.w	8001688 <UART_SetConfig+0x1f4>
 800157c:	2b10      	cmp	r3, #16
 800157e:	f040 8085 	bne.w	800168c <UART_SetConfig+0x1f8>
 8001582:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001584:	69e3      	ldr	r3, [r4, #28]
 8001586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158a:	f000 80ab 	beq.w	80016e4 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800158e:	2d08      	cmp	r5, #8
 8001590:	f200 8138 	bhi.w	8001804 <UART_SetConfig+0x370>
 8001594:	e8df f015 	tbh	[pc, r5, lsl #1]
 8001598:	01100107 	.word	0x01100107
 800159c:	0136011a 	.word	0x0136011a
 80015a0:	01360123 	.word	0x01360123
 80015a4:	01360136 	.word	0x01360136
 80015a8:	012d      	.short	0x012d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015aa:	2b30      	cmp	r3, #48	; 0x30
 80015ac:	d170      	bne.n	8001690 <UART_SetConfig+0x1fc>
 80015ae:	2508      	movs	r5, #8
 80015b0:	e7e8      	b.n	8001584 <UART_SetConfig+0xf0>
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <UART_SetConfig+0x288>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015bc:	2b80      	cmp	r3, #128	; 0x80
 80015be:	d069      	beq.n	8001694 <UART_SetConfig+0x200>
 80015c0:	d805      	bhi.n	80015ce <UART_SetConfig+0x13a>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d068      	beq.n	8001698 <UART_SetConfig+0x204>
 80015c6:	2b40      	cmp	r3, #64	; 0x40
 80015c8:	d168      	bne.n	800169c <UART_SetConfig+0x208>
 80015ca:	2504      	movs	r5, #4
 80015cc:	e7da      	b.n	8001584 <UART_SetConfig+0xf0>
 80015ce:	2bc0      	cmp	r3, #192	; 0xc0
 80015d0:	d166      	bne.n	80016a0 <UART_SetConfig+0x20c>
 80015d2:	2508      	movs	r5, #8
 80015d4:	e7d6      	b.n	8001584 <UART_SetConfig+0xf0>
 80015d6:	4b51      	ldr	r3, [pc, #324]	; (800171c <UART_SetConfig+0x288>)
 80015d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e4:	d05e      	beq.n	80016a4 <UART_SetConfig+0x210>
 80015e6:	d806      	bhi.n	80015f6 <UART_SetConfig+0x162>
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05d      	beq.n	80016a8 <UART_SetConfig+0x214>
 80015ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f0:	d15c      	bne.n	80016ac <UART_SetConfig+0x218>
 80015f2:	2504      	movs	r5, #4
 80015f4:	e7c6      	b.n	8001584 <UART_SetConfig+0xf0>
 80015f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015fa:	d159      	bne.n	80016b0 <UART_SetConfig+0x21c>
 80015fc:	2508      	movs	r5, #8
 80015fe:	e7c1      	b.n	8001584 <UART_SetConfig+0xf0>
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <UART_SetConfig+0x288>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800160a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160e:	d051      	beq.n	80016b4 <UART_SetConfig+0x220>
 8001610:	d806      	bhi.n	8001620 <UART_SetConfig+0x18c>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d050      	beq.n	80016b8 <UART_SetConfig+0x224>
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d14f      	bne.n	80016bc <UART_SetConfig+0x228>
 800161c:	2504      	movs	r5, #4
 800161e:	e7b1      	b.n	8001584 <UART_SetConfig+0xf0>
 8001620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001624:	d14c      	bne.n	80016c0 <UART_SetConfig+0x22c>
 8001626:	2508      	movs	r5, #8
 8001628:	e7ac      	b.n	8001584 <UART_SetConfig+0xf0>
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <UART_SetConfig+0x288>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001638:	d044      	beq.n	80016c4 <UART_SetConfig+0x230>
 800163a:	d806      	bhi.n	800164a <UART_SetConfig+0x1b6>
 800163c:	2b00      	cmp	r3, #0
 800163e:	d043      	beq.n	80016c8 <UART_SetConfig+0x234>
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001644:	d142      	bne.n	80016cc <UART_SetConfig+0x238>
 8001646:	2504      	movs	r5, #4
 8001648:	e79c      	b.n	8001584 <UART_SetConfig+0xf0>
 800164a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800164e:	d13f      	bne.n	80016d0 <UART_SetConfig+0x23c>
 8001650:	2508      	movs	r5, #8
 8001652:	e797      	b.n	8001584 <UART_SetConfig+0xf0>
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <UART_SetConfig+0x288>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001662:	d037      	beq.n	80016d4 <UART_SetConfig+0x240>
 8001664:	d805      	bhi.n	8001672 <UART_SetConfig+0x1de>
 8001666:	b3bb      	cbz	r3, 80016d8 <UART_SetConfig+0x244>
 8001668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800166c:	d136      	bne.n	80016dc <UART_SetConfig+0x248>
 800166e:	2504      	movs	r5, #4
 8001670:	e788      	b.n	8001584 <UART_SetConfig+0xf0>
 8001672:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001676:	d133      	bne.n	80016e0 <UART_SetConfig+0x24c>
 8001678:	2508      	movs	r5, #8
 800167a:	e783      	b.n	8001584 <UART_SetConfig+0xf0>
 800167c:	2502      	movs	r5, #2
 800167e:	e781      	b.n	8001584 <UART_SetConfig+0xf0>
 8001680:	2502      	movs	r5, #2
 8001682:	e77f      	b.n	8001584 <UART_SetConfig+0xf0>
 8001684:	2502      	movs	r5, #2
 8001686:	e77d      	b.n	8001584 <UART_SetConfig+0xf0>
 8001688:	2500      	movs	r5, #0
 800168a:	e77b      	b.n	8001584 <UART_SetConfig+0xf0>
 800168c:	2510      	movs	r5, #16
 800168e:	e779      	b.n	8001584 <UART_SetConfig+0xf0>
 8001690:	2510      	movs	r5, #16
 8001692:	e777      	b.n	8001584 <UART_SetConfig+0xf0>
 8001694:	2502      	movs	r5, #2
 8001696:	e775      	b.n	8001584 <UART_SetConfig+0xf0>
 8001698:	2500      	movs	r5, #0
 800169a:	e773      	b.n	8001584 <UART_SetConfig+0xf0>
 800169c:	2510      	movs	r5, #16
 800169e:	e771      	b.n	8001584 <UART_SetConfig+0xf0>
 80016a0:	2510      	movs	r5, #16
 80016a2:	e76f      	b.n	8001584 <UART_SetConfig+0xf0>
 80016a4:	2502      	movs	r5, #2
 80016a6:	e76d      	b.n	8001584 <UART_SetConfig+0xf0>
 80016a8:	2500      	movs	r5, #0
 80016aa:	e76b      	b.n	8001584 <UART_SetConfig+0xf0>
 80016ac:	2510      	movs	r5, #16
 80016ae:	e769      	b.n	8001584 <UART_SetConfig+0xf0>
 80016b0:	2510      	movs	r5, #16
 80016b2:	e767      	b.n	8001584 <UART_SetConfig+0xf0>
 80016b4:	2502      	movs	r5, #2
 80016b6:	e765      	b.n	8001584 <UART_SetConfig+0xf0>
 80016b8:	2501      	movs	r5, #1
 80016ba:	e763      	b.n	8001584 <UART_SetConfig+0xf0>
 80016bc:	2510      	movs	r5, #16
 80016be:	e761      	b.n	8001584 <UART_SetConfig+0xf0>
 80016c0:	2510      	movs	r5, #16
 80016c2:	e75f      	b.n	8001584 <UART_SetConfig+0xf0>
 80016c4:	2502      	movs	r5, #2
 80016c6:	e75d      	b.n	8001584 <UART_SetConfig+0xf0>
 80016c8:	2500      	movs	r5, #0
 80016ca:	e75b      	b.n	8001584 <UART_SetConfig+0xf0>
 80016cc:	2510      	movs	r5, #16
 80016ce:	e759      	b.n	8001584 <UART_SetConfig+0xf0>
 80016d0:	2510      	movs	r5, #16
 80016d2:	e757      	b.n	8001584 <UART_SetConfig+0xf0>
 80016d4:	2502      	movs	r5, #2
 80016d6:	e755      	b.n	8001584 <UART_SetConfig+0xf0>
 80016d8:	2500      	movs	r5, #0
 80016da:	e753      	b.n	8001584 <UART_SetConfig+0xf0>
 80016dc:	2510      	movs	r5, #16
 80016de:	e751      	b.n	8001584 <UART_SetConfig+0xf0>
 80016e0:	2510      	movs	r5, #16
 80016e2:	e74f      	b.n	8001584 <UART_SetConfig+0xf0>
    switch (clocksource)
 80016e4:	2d08      	cmp	r5, #8
 80016e6:	d84d      	bhi.n	8001784 <UART_SetConfig+0x2f0>
 80016e8:	e8df f005 	tbb	[pc, r5]
 80016ec:	4c2f241a 	.word	0x4c2f241a
 80016f0:	4c4c4c38 	.word	0x4c4c4c38
 80016f4:	43          	.byte	0x43
 80016f5:	00          	.byte	0x00
 80016f6:	bf00      	nop
 80016f8:	efff69f3 	.word	0xefff69f3
 80016fc:	40011000 	.word	0x40011000
 8001700:	40004400 	.word	0x40004400
 8001704:	40004800 	.word	0x40004800
 8001708:	40004c00 	.word	0x40004c00
 800170c:	40005000 	.word	0x40005000
 8001710:	40011400 	.word	0x40011400
 8001714:	40007800 	.word	0x40007800
 8001718:	40007c00 	.word	0x40007c00
 800171c:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8001720:	f7ff fe98 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001724:	6862      	ldr	r2, [r4, #4]
 8001726:	0853      	lsrs	r3, r2, #1
 8001728:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800172c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001730:	b29b      	uxth	r3, r3
        break;
 8001732:	e029      	b.n	8001788 <UART_SetConfig+0x2f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001734:	f7ff fe9e 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001738:	6862      	ldr	r2, [r4, #4]
 800173a:	0853      	lsrs	r3, r2, #1
 800173c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001740:	fbb3 f3f2 	udiv	r3, r3, r2
 8001744:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001746:	2500      	movs	r5, #0
        break;
 8001748:	e01e      	b.n	8001788 <UART_SetConfig+0x2f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800174a:	6862      	ldr	r2, [r4, #4]
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <UART_SetConfig+0x398>)
 800174e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001752:	fbb3 f3f2 	udiv	r3, r3, r2
 8001756:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001758:	2500      	movs	r5, #0
        break;
 800175a:	e015      	b.n	8001788 <UART_SetConfig+0x2f4>
        pclk = HAL_RCC_GetSysClockFreq();
 800175c:	f7ff fd6c 	bl	8001238 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001760:	6862      	ldr	r2, [r4, #4]
 8001762:	0853      	lsrs	r3, r2, #1
 8001764:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001768:	fbb3 f3f2 	udiv	r3, r3, r2
 800176c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800176e:	2500      	movs	r5, #0
        break;
 8001770:	e00a      	b.n	8001788 <UART_SetConfig+0x2f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001772:	6862      	ldr	r2, [r4, #4]
 8001774:	0853      	lsrs	r3, r2, #1
 8001776:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800177a:	fbb3 f3f2 	udiv	r3, r3, r2
 800177e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001780:	2500      	movs	r5, #0
        break;
 8001782:	e001      	b.n	8001788 <UART_SetConfig+0x2f4>
    switch (clocksource)
 8001784:	2501      	movs	r5, #1
 8001786:	2300      	movs	r3, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001788:	f1a3 0110 	sub.w	r1, r3, #16
 800178c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001790:	4291      	cmp	r1, r2
 8001792:	d842      	bhi.n	800181a <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001794:	b29a      	uxth	r2, r3
 8001796:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800179a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800179e:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	60d3      	str	r3, [r2, #12]
 80017a4:	e03c      	b.n	8001820 <UART_SetConfig+0x38c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017a6:	f7ff fe55 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017aa:	6862      	ldr	r2, [r4, #4]
 80017ac:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017b4:	b29b      	uxth	r3, r3
        break;
 80017b6:	e027      	b.n	8001808 <UART_SetConfig+0x374>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017b8:	f7ff fe5c 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017bc:	6862      	ldr	r2, [r4, #4]
 80017be:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017c8:	2500      	movs	r5, #0
        break;
 80017ca:	e01d      	b.n	8001808 <UART_SetConfig+0x374>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80017cc:	6862      	ldr	r2, [r4, #4]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <UART_SetConfig+0x39c>)
 80017d0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80017d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017da:	2500      	movs	r5, #0
        break;
 80017dc:	e014      	b.n	8001808 <UART_SetConfig+0x374>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017de:	f7ff fd2b 	bl	8001238 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017e2:	6862      	ldr	r2, [r4, #4]
 80017e4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017ee:	2500      	movs	r5, #0
        break;
 80017f0:	e00a      	b.n	8001808 <UART_SetConfig+0x374>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	0853      	lsrs	r3, r2, #1
 80017f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80017fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001800:	2500      	movs	r5, #0
        break;
 8001802:	e001      	b.n	8001808 <UART_SetConfig+0x374>
    switch (clocksource)
 8001804:	2501      	movs	r5, #1
 8001806:	2300      	movs	r3, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001808:	f1a3 0110 	sub.w	r1, r3, #16
 800180c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001810:	4291      	cmp	r1, r2
 8001812:	d804      	bhi.n	800181e <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001814:	6822      	ldr	r2, [r4, #0]
 8001816:	60d3      	str	r3, [r2, #12]
 8001818:	e002      	b.n	8001820 <UART_SetConfig+0x38c>
      ret = HAL_ERROR;
 800181a:	2501      	movs	r5, #1
 800181c:	e000      	b.n	8001820 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 800181e:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001820:	2300      	movs	r3, #0
 8001822:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001824:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001826:	4628      	mov	r0, r5
 8001828:	bd38      	pop	{r3, r4, r5, pc}
 800182a:	bf00      	nop
 800182c:	01e84800 	.word	0x01e84800
 8001830:	00f42400 	.word	0x00f42400

08001834 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001836:	f013 0f01 	tst.w	r3, #1
 800183a:	d006      	beq.n	800184a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	6853      	ldr	r3, [r2, #4]
 8001840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001844:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001846:	430b      	orrs	r3, r1
 8001848:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800184a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800184c:	f013 0f02 	tst.w	r3, #2
 8001850:	d006      	beq.n	8001860 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001852:	6802      	ldr	r2, [r0, #0]
 8001854:	6853      	ldr	r3, [r2, #4]
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800185c:	430b      	orrs	r3, r1
 800185e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001862:	f013 0f04 	tst.w	r3, #4
 8001866:	d006      	beq.n	8001876 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	6853      	ldr	r3, [r2, #4]
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001872:	430b      	orrs	r3, r1
 8001874:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001876:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001878:	f013 0f08 	tst.w	r3, #8
 800187c:	d006      	beq.n	800188c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6853      	ldr	r3, [r2, #4]
 8001882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001886:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001888:	430b      	orrs	r3, r1
 800188a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800188c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800188e:	f013 0f10 	tst.w	r3, #16
 8001892:	d006      	beq.n	80018a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001894:	6802      	ldr	r2, [r0, #0]
 8001896:	6893      	ldr	r3, [r2, #8]
 8001898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800189e:	430b      	orrs	r3, r1
 80018a0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018a4:	f013 0f20 	tst.w	r3, #32
 80018a8:	d006      	beq.n	80018b8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018aa:	6802      	ldr	r2, [r0, #0]
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018be:	d00a      	beq.n	80018d6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d4:	d00b      	beq.n	80018ee <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018dc:	d006      	beq.n	80018ec <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018de:	6802      	ldr	r2, [r0, #0]
 80018e0:	6853      	ldr	r3, [r2, #4]
 80018e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6053      	str	r3, [r2, #4]
  }
}
 80018ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018ee:	6802      	ldr	r2, [r0, #0]
 80018f0:	6853      	ldr	r3, [r2, #4]
 80018f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80018f6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6053      	str	r3, [r2, #4]
 80018fc:	e7eb      	b.n	80018d6 <UART_AdvFeatureConfig+0xa2>

080018fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80018fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001902:	4605      	mov	r5, r0
 8001904:	460f      	mov	r7, r1
 8001906:	4616      	mov	r6, r2
 8001908:	4699      	mov	r9, r3
 800190a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800190e:	682c      	ldr	r4, [r5, #0]
 8001910:	69e4      	ldr	r4, [r4, #28]
 8001912:	ea37 0304 	bics.w	r3, r7, r4
 8001916:	bf0c      	ite	eq
 8001918:	f04f 0c01 	moveq.w	ip, #1
 800191c:	f04f 0c00 	movne.w	ip, #0
 8001920:	45b4      	cmp	ip, r6
 8001922:	d13c      	bne.n	800199e <UART_WaitOnFlagUntilTimeout+0xa0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001924:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001928:	d0f1      	beq.n	800190e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800192a:	f7ff f8bd 	bl	8000aa8 <HAL_GetTick>
 800192e:	eba0 0009 	sub.w	r0, r0, r9
 8001932:	4540      	cmp	r0, r8
 8001934:	d821      	bhi.n	800197a <UART_WaitOnFlagUntilTimeout+0x7c>
 8001936:	f1b8 0f00 	cmp.w	r8, #0
 800193a:	d01e      	beq.n	800197a <UART_WaitOnFlagUntilTimeout+0x7c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f012 0f04 	tst.w	r2, #4
 8001944:	d0e3      	beq.n	800190e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800194c:	d0df      	beq.n	800190e <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800194e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001952:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001954:	682a      	ldr	r2, [r5, #0]
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800195c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800195e:	682a      	ldr	r2, [r5, #0]
 8001960:	6893      	ldr	r3, [r2, #8]
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001968:	2320      	movs	r3, #32
 800196a:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800196c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800196e:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001970:	2300      	movs	r3, #0
 8001972:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
 8001978:	e012      	b.n	80019a0 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800197a:	682a      	ldr	r2, [r5, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001982:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001984:	682a      	ldr	r2, [r5, #0]
 8001986:	6893      	ldr	r3, [r2, #8]
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800198e:	2320      	movs	r3, #32
 8001990:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001992:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001994:	2300      	movs	r3, #0
 8001996:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 800199a:	2003      	movs	r0, #3
 800199c:	e000      	b.n	80019a0 <UART_WaitOnFlagUntilTimeout+0xa2>
        }
      }
    }
  }
  return HAL_OK;
 800199e:	2000      	movs	r0, #0
}
 80019a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080019a4 <HAL_UART_Transmit>:
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80019ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d155      	bne.n	8001a5e <HAL_UART_Transmit+0xba>
 80019b2:	4604      	mov	r4, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	bf18      	it	ne
 80019bc:	2900      	cmpne	r1, #0
 80019be:	d052      	beq.n	8001a66 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80019c0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d050      	beq.n	8001a6a <HAL_UART_Transmit+0xc6>
 80019c8:	2301      	movs	r3, #1
 80019ca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019d2:	2321      	movs	r3, #33	; 0x21
 80019d4:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80019d6:	f7ff f867 	bl	8000aa8 <HAL_GetTick>
 80019da:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80019dc:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80019e0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019e4:	68a3      	ldr	r3, [r4, #8]
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ea:	d005      	beq.n	80019f8 <HAL_UART_Transmit+0x54>
      pdata16bits = NULL;
 80019ec:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80019f0:	2300      	movs	r3, #0
 80019f2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80019f6:	e012      	b.n	8001a1e <HAL_UART_Transmit+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f8:	6923      	ldr	r3, [r4, #16]
 80019fa:	b113      	cbz	r3, 8001a02 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 80019fc:	f04f 0800 	mov.w	r8, #0
 8001a00:	e7f6      	b.n	80019f0 <HAL_UART_Transmit+0x4c>
      pdata16bits = (uint16_t *) pData;
 8001a02:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001a04:	2500      	movs	r5, #0
 8001a06:	e7f3      	b.n	80019f0 <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a08:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8001a10:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001a14:	b292      	uxth	r2, r2
 8001a16:	3a01      	subs	r2, #1
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001a1e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b183      	cbz	r3, 8001a48 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a26:	9600      	str	r6, [sp, #0]
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff ff65 	bl	80018fe <UART_WaitOnFlagUntilTimeout>
 8001a34:	b9d8      	cbnz	r0, 8001a6e <HAL_UART_Transmit+0xca>
      if (pdata8bits == NULL)
 8001a36:	2d00      	cmp	r5, #0
 8001a38:	d1e6      	bne.n	8001a08 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a44:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001a46:	e7e3      	b.n	8001a10 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a48:	9600      	str	r6, [sp, #0]
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff ff54 	bl	80018fe <UART_WaitOnFlagUntilTimeout>
 8001a56:	b960      	cbnz	r0, 8001a72 <HAL_UART_Transmit+0xce>
    huart->gState = HAL_UART_STATE_READY;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001a5c:	e000      	b.n	8001a60 <HAL_UART_Transmit+0xbc>
    return HAL_BUSY;
 8001a5e:	2002      	movs	r0, #2
}
 8001a60:	b002      	add	sp, #8
 8001a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
 8001a68:	e7fa      	b.n	8001a60 <HAL_UART_Transmit+0xbc>
    __HAL_LOCK(huart);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	e7f8      	b.n	8001a60 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8001a6e:	2003      	movs	r0, #3
 8001a70:	e7f6      	b.n	8001a60 <HAL_UART_Transmit+0xbc>
      return HAL_TIMEOUT;
 8001a72:	2003      	movs	r0, #3
 8001a74:	e7f4      	b.n	8001a60 <HAL_UART_Transmit+0xbc>

08001a76 <HAL_UART_Receive>:
{
 8001a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a7e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d17c      	bne.n	8001b7e <HAL_UART_Receive+0x108>
 8001a84:	4604      	mov	r4, r0
 8001a86:	460d      	mov	r5, r1
 8001a88:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	bf18      	it	ne
 8001a8e:	2900      	cmpne	r1, #0
 8001a90:	d079      	beq.n	8001b86 <HAL_UART_Receive+0x110>
    __HAL_LOCK(huart);
 8001a92:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d077      	beq.n	8001b8a <HAL_UART_Receive+0x114>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001aa4:	2322      	movs	r3, #34	; 0x22
 8001aa6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001aa8:	f7fe fffe 	bl	8000aa8 <HAL_GetTick>
 8001aac:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001aae:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001ab2:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001ab6:	68a3      	ldr	r3, [r4, #8]
 8001ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abc:	d006      	beq.n	8001acc <HAL_UART_Receive+0x56>
 8001abe:	b9a3      	cbnz	r3, 8001aea <HAL_UART_Receive+0x74>
 8001ac0:	6922      	ldr	r2, [r4, #16]
 8001ac2:	b972      	cbnz	r2, 8001ae2 <HAL_UART_Receive+0x6c>
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001aca:	e014      	b.n	8001af6 <HAL_UART_Receive+0x80>
 8001acc:	6922      	ldr	r2, [r4, #16]
 8001ace:	b922      	cbnz	r2, 8001ada <HAL_UART_Receive+0x64>
 8001ad0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001ad4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ad8:	e00d      	b.n	8001af6 <HAL_UART_Receive+0x80>
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ae0:	e009      	b.n	8001af6 <HAL_UART_Receive+0x80>
 8001ae2:	227f      	movs	r2, #127	; 0x7f
 8001ae4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ae8:	e005      	b.n	8001af6 <HAL_UART_Receive+0x80>
 8001aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aee:	d00d      	beq.n	8001b0c <HAL_UART_Receive+0x96>
 8001af0:	2200      	movs	r2, #0
 8001af2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001af6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afe:	d00f      	beq.n	8001b20 <HAL_UART_Receive+0xaa>
      pdata16bits = NULL;
 8001b00:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001b04:	2300      	movs	r3, #0
 8001b06:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001b0a:	e01e      	b.n	8001b4a <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8001b0c:	6922      	ldr	r2, [r4, #16]
 8001b0e:	b91a      	cbnz	r2, 8001b18 <HAL_UART_Receive+0xa2>
 8001b10:	227f      	movs	r2, #127	; 0x7f
 8001b12:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b16:	e7ee      	b.n	8001af6 <HAL_UART_Receive+0x80>
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b1e:	e7ea      	b.n	8001af6 <HAL_UART_Receive+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	b113      	cbz	r3, 8001b2a <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001b24:	f04f 0900 	mov.w	r9, #0
 8001b28:	e7ec      	b.n	8001b04 <HAL_UART_Receive+0x8e>
      pdata16bits = (uint16_t *) pData;
 8001b2a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	e7e9      	b.n	8001b04 <HAL_UART_Receive+0x8e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	ea08 0303 	and.w	r3, r8, r3
 8001b38:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001b3c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001b40:	b292      	uxth	r2, r2
 8001b42:	3a01      	subs	r2, #1
 8001b44:	b292      	uxth	r2, r2
 8001b46:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001b4a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b18b      	cbz	r3, 8001b76 <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	9600      	str	r6, [sp, #0]
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fecf 	bl	80018fe <UART_WaitOnFlagUntilTimeout>
 8001b60:	b9a8      	cbnz	r0, 8001b8e <HAL_UART_Receive+0x118>
      if (pdata8bits == NULL)
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	d0e4      	beq.n	8001b30 <HAL_UART_Receive+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6a:	fa5f f388 	uxtb.w	r3, r8
 8001b6e:	4013      	ands	r3, r2
 8001b70:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001b74:	e7e2      	b.n	8001b3c <HAL_UART_Receive+0xc6>
    huart->RxState = HAL_UART_STATE_READY;
 8001b76:	2320      	movs	r3, #32
 8001b78:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_UART_Receive+0x10a>
    return HAL_BUSY;
 8001b7e:	2002      	movs	r0, #2
}
 8001b80:	b003      	add	sp, #12
 8001b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
 8001b88:	e7fa      	b.n	8001b80 <HAL_UART_Receive+0x10a>
    __HAL_LOCK(huart);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	e7f8      	b.n	8001b80 <HAL_UART_Receive+0x10a>
        return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e7f6      	b.n	8001b80 <HAL_UART_Receive+0x10a>

08001b92 <UART_CheckIdleState>:
{
 8001b92:	b530      	push	{r4, r5, lr}
 8001b94:	b083      	sub	sp, #12
 8001b96:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b9c:	f7fe ff84 	bl	8000aa8 <HAL_GetTick>
 8001ba0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f012 0f08 	tst.w	r2, #8
 8001baa:	d10c      	bne.n	8001bc6 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f013 0f04 	tst.w	r3, #4
 8001bb4:	d115      	bne.n	8001be2 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001bba:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001bc2:	b003      	add	sp, #12
 8001bc4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fe92 	bl	80018fe <UART_WaitOnFlagUntilTimeout>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d0e6      	beq.n	8001bac <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e7ef      	b.n	8001bc2 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001be2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	462b      	mov	r3, r5
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fe84 	bl	80018fe <UART_WaitOnFlagUntilTimeout>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	d0dd      	beq.n	8001bb6 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	e7e1      	b.n	8001bc2 <UART_CheckIdleState+0x30>

08001bfe <HAL_UART_Init>:
  if (huart == NULL)
 8001bfe:	b368      	cbz	r0, 8001c5c <HAL_UART_Init+0x5e>
{
 8001c00:	b510      	push	{r4, lr}
 8001c02:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c04:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001c06:	b303      	cbz	r3, 8001c4a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c08:	2324      	movs	r3, #36	; 0x24
 8001c0a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fc3c 	bl	8001494 <UART_SetConfig>
 8001c1c:	2801      	cmp	r0, #1
 8001c1e:	d013      	beq.n	8001c48 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c22:	b9bb      	cbnz	r3, 8001c54 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	6853      	ldr	r3, [r2, #4]
 8001c28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c2c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	6893      	ldr	r3, [r2, #8]
 8001c32:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c36:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff ffa5 	bl	8001b92 <UART_CheckIdleState>
}
 8001c48:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c4a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001c4e:	f7fe fded 	bl	800082c <HAL_UART_MspInit>
 8001c52:	e7d9      	b.n	8001c08 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff fded 	bl	8001834 <UART_AdvFeatureConfig>
 8001c5a:	e7e3      	b.n	8001c24 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
}
 8001c5e:	4770      	bx	lr

08001c60 <__sflush_r>:
 8001c60:	898a      	ldrh	r2, [r1, #12]
 8001c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c66:	4605      	mov	r5, r0
 8001c68:	0710      	lsls	r0, r2, #28
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	d458      	bmi.n	8001d20 <__sflush_r+0xc0>
 8001c6e:	684b      	ldr	r3, [r1, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dc05      	bgt.n	8001c80 <__sflush_r+0x20>
 8001c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dc02      	bgt.n	8001c80 <__sflush_r+0x20>
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c82:	2e00      	cmp	r6, #0
 8001c84:	d0f9      	beq.n	8001c7a <__sflush_r+0x1a>
 8001c86:	2300      	movs	r3, #0
 8001c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c8c:	682f      	ldr	r7, [r5, #0]
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	d032      	beq.n	8001cf8 <__sflush_r+0x98>
 8001c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	075a      	lsls	r2, r3, #29
 8001c98:	d505      	bpl.n	8001ca6 <__sflush_r+0x46>
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	1ac0      	subs	r0, r0, r3
 8001c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ca0:	b10b      	cbz	r3, 8001ca6 <__sflush_r+0x46>
 8001ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca4:	1ac0      	subs	r0, r0, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cac:	6a21      	ldr	r1, [r4, #32]
 8001cae:	4628      	mov	r0, r5
 8001cb0:	47b0      	blx	r6
 8001cb2:	1c43      	adds	r3, r0, #1
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	d106      	bne.n	8001cc6 <__sflush_r+0x66>
 8001cb8:	6829      	ldr	r1, [r5, #0]
 8001cba:	291d      	cmp	r1, #29
 8001cbc:	d82c      	bhi.n	8001d18 <__sflush_r+0xb8>
 8001cbe:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <__sflush_r+0x108>)
 8001cc0:	40ca      	lsrs	r2, r1
 8001cc2:	07d6      	lsls	r6, r2, #31
 8001cc4:	d528      	bpl.n	8001d18 <__sflush_r+0xb8>
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6062      	str	r2, [r4, #4]
 8001cca:	04d9      	lsls	r1, r3, #19
 8001ccc:	6922      	ldr	r2, [r4, #16]
 8001cce:	6022      	str	r2, [r4, #0]
 8001cd0:	d504      	bpl.n	8001cdc <__sflush_r+0x7c>
 8001cd2:	1c42      	adds	r2, r0, #1
 8001cd4:	d101      	bne.n	8001cda <__sflush_r+0x7a>
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	b903      	cbnz	r3, 8001cdc <__sflush_r+0x7c>
 8001cda:	6560      	str	r0, [r4, #84]	; 0x54
 8001cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cde:	602f      	str	r7, [r5, #0]
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d0ca      	beq.n	8001c7a <__sflush_r+0x1a>
 8001ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ce8:	4299      	cmp	r1, r3
 8001cea:	d002      	beq.n	8001cf2 <__sflush_r+0x92>
 8001cec:	4628      	mov	r0, r5
 8001cee:	f000 f9df 	bl	80020b0 <_free_r>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8001cf6:	e7c1      	b.n	8001c7c <__sflush_r+0x1c>
 8001cf8:	6a21      	ldr	r1, [r4, #32]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	47b0      	blx	r6
 8001d00:	1c41      	adds	r1, r0, #1
 8001d02:	d1c7      	bne.n	8001c94 <__sflush_r+0x34>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0c4      	beq.n	8001c94 <__sflush_r+0x34>
 8001d0a:	2b1d      	cmp	r3, #29
 8001d0c:	d001      	beq.n	8001d12 <__sflush_r+0xb2>
 8001d0e:	2b16      	cmp	r3, #22
 8001d10:	d101      	bne.n	8001d16 <__sflush_r+0xb6>
 8001d12:	602f      	str	r7, [r5, #0]
 8001d14:	e7b1      	b.n	8001c7a <__sflush_r+0x1a>
 8001d16:	89a3      	ldrh	r3, [r4, #12]
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	81a3      	strh	r3, [r4, #12]
 8001d1e:	e7ad      	b.n	8001c7c <__sflush_r+0x1c>
 8001d20:	690f      	ldr	r7, [r1, #16]
 8001d22:	2f00      	cmp	r7, #0
 8001d24:	d0a9      	beq.n	8001c7a <__sflush_r+0x1a>
 8001d26:	0793      	lsls	r3, r2, #30
 8001d28:	680e      	ldr	r6, [r1, #0]
 8001d2a:	bf08      	it	eq
 8001d2c:	694b      	ldreq	r3, [r1, #20]
 8001d2e:	600f      	str	r7, [r1, #0]
 8001d30:	bf18      	it	ne
 8001d32:	2300      	movne	r3, #0
 8001d34:	eba6 0807 	sub.w	r8, r6, r7
 8001d38:	608b      	str	r3, [r1, #8]
 8001d3a:	f1b8 0f00 	cmp.w	r8, #0
 8001d3e:	dd9c      	ble.n	8001c7a <__sflush_r+0x1a>
 8001d40:	6a21      	ldr	r1, [r4, #32]
 8001d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d44:	4643      	mov	r3, r8
 8001d46:	463a      	mov	r2, r7
 8001d48:	4628      	mov	r0, r5
 8001d4a:	47b0      	blx	r6
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	dc06      	bgt.n	8001d5e <__sflush_r+0xfe>
 8001d50:	89a3      	ldrh	r3, [r4, #12]
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	81a3      	strh	r3, [r4, #12]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	e78e      	b.n	8001c7c <__sflush_r+0x1c>
 8001d5e:	4407      	add	r7, r0
 8001d60:	eba8 0800 	sub.w	r8, r8, r0
 8001d64:	e7e9      	b.n	8001d3a <__sflush_r+0xda>
 8001d66:	bf00      	nop
 8001d68:	20400001 	.word	0x20400001

08001d6c <_fflush_r>:
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	690b      	ldr	r3, [r1, #16]
 8001d70:	4605      	mov	r5, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	b913      	cbnz	r3, 8001d7c <_fflush_r+0x10>
 8001d76:	2500      	movs	r5, #0
 8001d78:	4628      	mov	r0, r5
 8001d7a:	bd38      	pop	{r3, r4, r5, pc}
 8001d7c:	b118      	cbz	r0, 8001d86 <_fflush_r+0x1a>
 8001d7e:	6983      	ldr	r3, [r0, #24]
 8001d80:	b90b      	cbnz	r3, 8001d86 <_fflush_r+0x1a>
 8001d82:	f000 f899 	bl	8001eb8 <__sinit>
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <_fflush_r+0x6c>)
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	d11b      	bne.n	8001dc4 <_fflush_r+0x58>
 8001d8c:	686c      	ldr	r4, [r5, #4]
 8001d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ef      	beq.n	8001d76 <_fflush_r+0xa>
 8001d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d98:	07d0      	lsls	r0, r2, #31
 8001d9a:	d404      	bmi.n	8001da6 <_fflush_r+0x3a>
 8001d9c:	0599      	lsls	r1, r3, #22
 8001d9e:	d402      	bmi.n	8001da6 <_fflush_r+0x3a>
 8001da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001da2:	f000 f97a 	bl	800209a <__retarget_lock_acquire_recursive>
 8001da6:	4628      	mov	r0, r5
 8001da8:	4621      	mov	r1, r4
 8001daa:	f7ff ff59 	bl	8001c60 <__sflush_r>
 8001dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001db0:	07da      	lsls	r2, r3, #31
 8001db2:	4605      	mov	r5, r0
 8001db4:	d4e0      	bmi.n	8001d78 <_fflush_r+0xc>
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	059b      	lsls	r3, r3, #22
 8001dba:	d4dd      	bmi.n	8001d78 <_fflush_r+0xc>
 8001dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dbe:	f000 f96d 	bl	800209c <__retarget_lock_release_recursive>
 8001dc2:	e7d9      	b.n	8001d78 <_fflush_r+0xc>
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <_fflush_r+0x70>)
 8001dc6:	429c      	cmp	r4, r3
 8001dc8:	d101      	bne.n	8001dce <_fflush_r+0x62>
 8001dca:	68ac      	ldr	r4, [r5, #8]
 8001dcc:	e7df      	b.n	8001d8e <_fflush_r+0x22>
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <_fflush_r+0x74>)
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	bf08      	it	eq
 8001dd4:	68ec      	ldreq	r4, [r5, #12]
 8001dd6:	e7da      	b.n	8001d8e <_fflush_r+0x22>
 8001dd8:	08003358 	.word	0x08003358
 8001ddc:	08003378 	.word	0x08003378
 8001de0:	08003338 	.word	0x08003338

08001de4 <fflush>:
 8001de4:	4601      	mov	r1, r0
 8001de6:	b920      	cbnz	r0, 8001df2 <fflush+0xe>
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <fflush+0x18>)
 8001dea:	4905      	ldr	r1, [pc, #20]	; (8001e00 <fflush+0x1c>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f000 b8fe 	b.w	8001fee <_fwalk_reent>
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <fflush+0x20>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f7ff bfb9 	b.w	8001d6c <_fflush_r>
 8001dfa:	bf00      	nop
 8001dfc:	08003398 	.word	0x08003398
 8001e00:	08001d6d 	.word	0x08001d6d
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <std>:
 8001e08:	2300      	movs	r3, #0
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e16:	6083      	str	r3, [r0, #8]
 8001e18:	8181      	strh	r1, [r0, #12]
 8001e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e1c:	81c2      	strh	r2, [r0, #14]
 8001e1e:	6183      	str	r3, [r0, #24]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2208      	movs	r2, #8
 8001e24:	305c      	adds	r0, #92	; 0x5c
 8001e26:	f000 f93a 	bl	800209e <memset>
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <std+0x38>)
 8001e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <std+0x3c>)
 8001e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <std+0x40>)
 8001e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <std+0x44>)
 8001e38:	6224      	str	r4, [r4, #32]
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	080023d9 	.word	0x080023d9
 8001e44:	080023fb 	.word	0x080023fb
 8001e48:	08002433 	.word	0x08002433
 8001e4c:	08002457 	.word	0x08002457

08001e50 <_cleanup_r>:
 8001e50:	4901      	ldr	r1, [pc, #4]	; (8001e58 <_cleanup_r+0x8>)
 8001e52:	f000 b8cc 	b.w	8001fee <_fwalk_reent>
 8001e56:	bf00      	nop
 8001e58:	08001d6d 	.word	0x08001d6d

08001e5c <__sfmoreglue>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	2268      	movs	r2, #104	; 0x68
 8001e60:	1e4d      	subs	r5, r1, #1
 8001e62:	4355      	muls	r5, r2
 8001e64:	460e      	mov	r6, r1
 8001e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e6a:	f000 f98d 	bl	8002188 <_malloc_r>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	b140      	cbz	r0, 8001e84 <__sfmoreglue+0x28>
 8001e72:	2100      	movs	r1, #0
 8001e74:	e9c0 1600 	strd	r1, r6, [r0]
 8001e78:	300c      	adds	r0, #12
 8001e7a:	60a0      	str	r0, [r4, #8]
 8001e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e80:	f000 f90d 	bl	800209e <memset>
 8001e84:	4620      	mov	r0, r4
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <__sfp_lock_acquire>:
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <__sfp_lock_acquire+0x8>)
 8001e8a:	f000 b906 	b.w	800209a <__retarget_lock_acquire_recursive>
 8001e8e:	bf00      	nop
 8001e90:	20000195 	.word	0x20000195

08001e94 <__sfp_lock_release>:
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <__sfp_lock_release+0x8>)
 8001e96:	f000 b901 	b.w	800209c <__retarget_lock_release_recursive>
 8001e9a:	bf00      	nop
 8001e9c:	20000195 	.word	0x20000195

08001ea0 <__sinit_lock_acquire>:
 8001ea0:	4801      	ldr	r0, [pc, #4]	; (8001ea8 <__sinit_lock_acquire+0x8>)
 8001ea2:	f000 b8fa 	b.w	800209a <__retarget_lock_acquire_recursive>
 8001ea6:	bf00      	nop
 8001ea8:	20000196 	.word	0x20000196

08001eac <__sinit_lock_release>:
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <__sinit_lock_release+0x8>)
 8001eae:	f000 b8f5 	b.w	800209c <__retarget_lock_release_recursive>
 8001eb2:	bf00      	nop
 8001eb4:	20000196 	.word	0x20000196

08001eb8 <__sinit>:
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	f7ff fff0 	bl	8001ea0 <__sinit_lock_acquire>
 8001ec0:	69a3      	ldr	r3, [r4, #24]
 8001ec2:	b11b      	cbz	r3, 8001ecc <__sinit+0x14>
 8001ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec8:	f7ff bff0 	b.w	8001eac <__sinit_lock_release>
 8001ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <__sinit+0x68>)
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <__sinit+0x6c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001eda:	42a3      	cmp	r3, r4
 8001edc:	bf04      	itt	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	61a3      	streq	r3, [r4, #24]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f820 	bl	8001f28 <__sfp>
 8001ee8:	6060      	str	r0, [r4, #4]
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 f81c 	bl	8001f28 <__sfp>
 8001ef0:	60a0      	str	r0, [r4, #8]
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 f818 	bl	8001f28 <__sfp>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60e0      	str	r0, [r4, #12]
 8001efc:	2104      	movs	r1, #4
 8001efe:	6860      	ldr	r0, [r4, #4]
 8001f00:	f7ff ff82 	bl	8001e08 <std>
 8001f04:	68a0      	ldr	r0, [r4, #8]
 8001f06:	2201      	movs	r2, #1
 8001f08:	2109      	movs	r1, #9
 8001f0a:	f7ff ff7d 	bl	8001e08 <std>
 8001f0e:	68e0      	ldr	r0, [r4, #12]
 8001f10:	2202      	movs	r2, #2
 8001f12:	2112      	movs	r1, #18
 8001f14:	f7ff ff78 	bl	8001e08 <std>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61a3      	str	r3, [r4, #24]
 8001f1c:	e7d2      	b.n	8001ec4 <__sinit+0xc>
 8001f1e:	bf00      	nop
 8001f20:	08003398 	.word	0x08003398
 8001f24:	08001e51 	.word	0x08001e51

08001f28 <__sfp>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4607      	mov	r7, r0
 8001f2c:	f7ff ffac 	bl	8001e88 <__sfp_lock_acquire>
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <__sfp+0x84>)
 8001f32:	681e      	ldr	r6, [r3, #0]
 8001f34:	69b3      	ldr	r3, [r6, #24]
 8001f36:	b913      	cbnz	r3, 8001f3e <__sfp+0x16>
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f7ff ffbd 	bl	8001eb8 <__sinit>
 8001f3e:	3648      	adds	r6, #72	; 0x48
 8001f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	d503      	bpl.n	8001f50 <__sfp+0x28>
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	b30b      	cbz	r3, 8001f90 <__sfp+0x68>
 8001f4c:	6836      	ldr	r6, [r6, #0]
 8001f4e:	e7f7      	b.n	8001f40 <__sfp+0x18>
 8001f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f54:	b9d5      	cbnz	r5, 8001f8c <__sfp+0x64>
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <__sfp+0x88>)
 8001f58:	60e3      	str	r3, [r4, #12]
 8001f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f60:	f000 f89a 	bl	8002098 <__retarget_lock_init_recursive>
 8001f64:	f7ff ff96 	bl	8001e94 <__sfp_lock_release>
 8001f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f70:	6025      	str	r5, [r4, #0]
 8001f72:	61a5      	str	r5, [r4, #24]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4629      	mov	r1, r5
 8001f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f7c:	f000 f88f 	bl	800209e <memset>
 8001f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f88:	4620      	mov	r0, r4
 8001f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8c:	3468      	adds	r4, #104	; 0x68
 8001f8e:	e7d9      	b.n	8001f44 <__sfp+0x1c>
 8001f90:	2104      	movs	r1, #4
 8001f92:	4638      	mov	r0, r7
 8001f94:	f7ff ff62 	bl	8001e5c <__sfmoreglue>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	6030      	str	r0, [r6, #0]
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1d5      	bne.n	8001f4c <__sfp+0x24>
 8001fa0:	f7ff ff78 	bl	8001e94 <__sfp_lock_release>
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	e7ee      	b.n	8001f88 <__sfp+0x60>
 8001faa:	bf00      	nop
 8001fac:	08003398 	.word	0x08003398
 8001fb0:	ffff0001 	.word	0xffff0001

08001fb4 <_fwalk>:
 8001fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb8:	460f      	mov	r7, r1
 8001fba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8001fc4:	f1b8 0801 	subs.w	r8, r8, #1
 8001fc8:	d505      	bpl.n	8001fd6 <_fwalk+0x22>
 8001fca:	6824      	ldr	r4, [r4, #0]
 8001fcc:	2c00      	cmp	r4, #0
 8001fce:	d1f7      	bne.n	8001fc0 <_fwalk+0xc>
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd6:	89ab      	ldrh	r3, [r5, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d906      	bls.n	8001fea <_fwalk+0x36>
 8001fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	d002      	beq.n	8001fea <_fwalk+0x36>
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	47b8      	blx	r7
 8001fe8:	4306      	orrs	r6, r0
 8001fea:	3568      	adds	r5, #104	; 0x68
 8001fec:	e7ea      	b.n	8001fc4 <_fwalk+0x10>

08001fee <_fwalk_reent>:
 8001fee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ff2:	4606      	mov	r6, r0
 8001ff4:	4688      	mov	r8, r1
 8001ff6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ffa:	2700      	movs	r7, #0
 8001ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002000:	f1b9 0901 	subs.w	r9, r9, #1
 8002004:	d505      	bpl.n	8002012 <_fwalk_reent+0x24>
 8002006:	6824      	ldr	r4, [r4, #0]
 8002008:	2c00      	cmp	r4, #0
 800200a:	d1f7      	bne.n	8001ffc <_fwalk_reent+0xe>
 800200c:	4638      	mov	r0, r7
 800200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002012:	89ab      	ldrh	r3, [r5, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d907      	bls.n	8002028 <_fwalk_reent+0x3a>
 8002018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800201c:	3301      	adds	r3, #1
 800201e:	d003      	beq.n	8002028 <_fwalk_reent+0x3a>
 8002020:	4629      	mov	r1, r5
 8002022:	4630      	mov	r0, r6
 8002024:	47c0      	blx	r8
 8002026:	4307      	orrs	r7, r0
 8002028:	3568      	adds	r5, #104	; 0x68
 800202a:	e7e9      	b.n	8002000 <_fwalk_reent+0x12>

0800202c <getchar>:
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <getchar+0x20>)
 800202e:	b510      	push	{r4, lr}
 8002030:	681c      	ldr	r4, [r3, #0]
 8002032:	b124      	cbz	r4, 800203e <getchar+0x12>
 8002034:	69a3      	ldr	r3, [r4, #24]
 8002036:	b913      	cbnz	r3, 800203e <getchar+0x12>
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff ff3d 	bl	8001eb8 <__sinit>
 800203e:	6861      	ldr	r1, [r4, #4]
 8002040:	4620      	mov	r0, r4
 8002042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002046:	f000 baed 	b.w	8002624 <_getc_r>
 800204a:	bf00      	nop
 800204c:	2000000c 	.word	0x2000000c

08002050 <__libc_init_array>:
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	4d0d      	ldr	r5, [pc, #52]	; (8002088 <__libc_init_array+0x38>)
 8002054:	4c0d      	ldr	r4, [pc, #52]	; (800208c <__libc_init_array+0x3c>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	2600      	movs	r6, #0
 800205c:	42a6      	cmp	r6, r4
 800205e:	d109      	bne.n	8002074 <__libc_init_array+0x24>
 8002060:	4d0b      	ldr	r5, [pc, #44]	; (8002090 <__libc_init_array+0x40>)
 8002062:	4c0c      	ldr	r4, [pc, #48]	; (8002094 <__libc_init_array+0x44>)
 8002064:	f000 fffa 	bl	800305c <_init>
 8002068:	1b64      	subs	r4, r4, r5
 800206a:	10a4      	asrs	r4, r4, #2
 800206c:	2600      	movs	r6, #0
 800206e:	42a6      	cmp	r6, r4
 8002070:	d105      	bne.n	800207e <__libc_init_array+0x2e>
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	f855 3b04 	ldr.w	r3, [r5], #4
 8002078:	4798      	blx	r3
 800207a:	3601      	adds	r6, #1
 800207c:	e7ee      	b.n	800205c <__libc_init_array+0xc>
 800207e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002082:	4798      	blx	r3
 8002084:	3601      	adds	r6, #1
 8002086:	e7f2      	b.n	800206e <__libc_init_array+0x1e>
 8002088:	080033d8 	.word	0x080033d8
 800208c:	080033d8 	.word	0x080033d8
 8002090:	080033d8 	.word	0x080033d8
 8002094:	080033dc 	.word	0x080033dc

08002098 <__retarget_lock_init_recursive>:
 8002098:	4770      	bx	lr

0800209a <__retarget_lock_acquire_recursive>:
 800209a:	4770      	bx	lr

0800209c <__retarget_lock_release_recursive>:
 800209c:	4770      	bx	lr

0800209e <memset>:
 800209e:	4402      	add	r2, r0
 80020a0:	4603      	mov	r3, r0
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d100      	bne.n	80020a8 <memset+0xa>
 80020a6:	4770      	bx	lr
 80020a8:	f803 1b01 	strb.w	r1, [r3], #1
 80020ac:	e7f9      	b.n	80020a2 <memset+0x4>
	...

080020b0 <_free_r>:
 80020b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d044      	beq.n	8002140 <_free_r+0x90>
 80020b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ba:	9001      	str	r0, [sp, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f1a1 0404 	sub.w	r4, r1, #4
 80020c2:	bfb8      	it	lt
 80020c4:	18e4      	addlt	r4, r4, r3
 80020c6:	f000 fb65 	bl	8002794 <__malloc_lock>
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <_free_r+0x94>)
 80020cc:	9801      	ldr	r0, [sp, #4]
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	b933      	cbnz	r3, 80020e0 <_free_r+0x30>
 80020d2:	6063      	str	r3, [r4, #4]
 80020d4:	6014      	str	r4, [r2, #0]
 80020d6:	b003      	add	sp, #12
 80020d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020dc:	f000 bb60 	b.w	80027a0 <__malloc_unlock>
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	d908      	bls.n	80020f6 <_free_r+0x46>
 80020e4:	6825      	ldr	r5, [r4, #0]
 80020e6:	1961      	adds	r1, r4, r5
 80020e8:	428b      	cmp	r3, r1
 80020ea:	bf01      	itttt	eq
 80020ec:	6819      	ldreq	r1, [r3, #0]
 80020ee:	685b      	ldreq	r3, [r3, #4]
 80020f0:	1949      	addeq	r1, r1, r5
 80020f2:	6021      	streq	r1, [r4, #0]
 80020f4:	e7ed      	b.n	80020d2 <_free_r+0x22>
 80020f6:	461a      	mov	r2, r3
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b10b      	cbz	r3, 8002100 <_free_r+0x50>
 80020fc:	42a3      	cmp	r3, r4
 80020fe:	d9fa      	bls.n	80020f6 <_free_r+0x46>
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	1855      	adds	r5, r2, r1
 8002104:	42a5      	cmp	r5, r4
 8002106:	d10b      	bne.n	8002120 <_free_r+0x70>
 8002108:	6824      	ldr	r4, [r4, #0]
 800210a:	4421      	add	r1, r4
 800210c:	1854      	adds	r4, r2, r1
 800210e:	42a3      	cmp	r3, r4
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	d1e0      	bne.n	80020d6 <_free_r+0x26>
 8002114:	681c      	ldr	r4, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6053      	str	r3, [r2, #4]
 800211a:	4421      	add	r1, r4
 800211c:	6011      	str	r1, [r2, #0]
 800211e:	e7da      	b.n	80020d6 <_free_r+0x26>
 8002120:	d902      	bls.n	8002128 <_free_r+0x78>
 8002122:	230c      	movs	r3, #12
 8002124:	6003      	str	r3, [r0, #0]
 8002126:	e7d6      	b.n	80020d6 <_free_r+0x26>
 8002128:	6825      	ldr	r5, [r4, #0]
 800212a:	1961      	adds	r1, r4, r5
 800212c:	428b      	cmp	r3, r1
 800212e:	bf04      	itt	eq
 8002130:	6819      	ldreq	r1, [r3, #0]
 8002132:	685b      	ldreq	r3, [r3, #4]
 8002134:	6063      	str	r3, [r4, #4]
 8002136:	bf04      	itt	eq
 8002138:	1949      	addeq	r1, r1, r5
 800213a:	6021      	streq	r1, [r4, #0]
 800213c:	6054      	str	r4, [r2, #4]
 800213e:	e7ca      	b.n	80020d6 <_free_r+0x26>
 8002140:	b003      	add	sp, #12
 8002142:	bd30      	pop	{r4, r5, pc}
 8002144:	20000198 	.word	0x20000198

08002148 <sbrk_aligned>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	4e0e      	ldr	r6, [pc, #56]	; (8002184 <sbrk_aligned+0x3c>)
 800214c:	460c      	mov	r4, r1
 800214e:	6831      	ldr	r1, [r6, #0]
 8002150:	4605      	mov	r5, r0
 8002152:	b911      	cbnz	r1, 800215a <sbrk_aligned+0x12>
 8002154:	f000 f930 	bl	80023b8 <_sbrk_r>
 8002158:	6030      	str	r0, [r6, #0]
 800215a:	4621      	mov	r1, r4
 800215c:	4628      	mov	r0, r5
 800215e:	f000 f92b 	bl	80023b8 <_sbrk_r>
 8002162:	1c43      	adds	r3, r0, #1
 8002164:	d00a      	beq.n	800217c <sbrk_aligned+0x34>
 8002166:	1cc4      	adds	r4, r0, #3
 8002168:	f024 0403 	bic.w	r4, r4, #3
 800216c:	42a0      	cmp	r0, r4
 800216e:	d007      	beq.n	8002180 <sbrk_aligned+0x38>
 8002170:	1a21      	subs	r1, r4, r0
 8002172:	4628      	mov	r0, r5
 8002174:	f000 f920 	bl	80023b8 <_sbrk_r>
 8002178:	3001      	adds	r0, #1
 800217a:	d101      	bne.n	8002180 <sbrk_aligned+0x38>
 800217c:	f04f 34ff 	mov.w	r4, #4294967295
 8002180:	4620      	mov	r0, r4
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	2000019c 	.word	0x2000019c

08002188 <_malloc_r>:
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218c:	1ccd      	adds	r5, r1, #3
 800218e:	f025 0503 	bic.w	r5, r5, #3
 8002192:	3508      	adds	r5, #8
 8002194:	2d0c      	cmp	r5, #12
 8002196:	bf38      	it	cc
 8002198:	250c      	movcc	r5, #12
 800219a:	2d00      	cmp	r5, #0
 800219c:	4607      	mov	r7, r0
 800219e:	db01      	blt.n	80021a4 <_malloc_r+0x1c>
 80021a0:	42a9      	cmp	r1, r5
 80021a2:	d905      	bls.n	80021b0 <_malloc_r+0x28>
 80021a4:	230c      	movs	r3, #12
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	2600      	movs	r6, #0
 80021aa:	4630      	mov	r0, r6
 80021ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021b0:	4e2e      	ldr	r6, [pc, #184]	; (800226c <_malloc_r+0xe4>)
 80021b2:	f000 faef 	bl	8002794 <__malloc_lock>
 80021b6:	6833      	ldr	r3, [r6, #0]
 80021b8:	461c      	mov	r4, r3
 80021ba:	bb34      	cbnz	r4, 800220a <_malloc_r+0x82>
 80021bc:	4629      	mov	r1, r5
 80021be:	4638      	mov	r0, r7
 80021c0:	f7ff ffc2 	bl	8002148 <sbrk_aligned>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	4604      	mov	r4, r0
 80021c8:	d14d      	bne.n	8002266 <_malloc_r+0xde>
 80021ca:	6834      	ldr	r4, [r6, #0]
 80021cc:	4626      	mov	r6, r4
 80021ce:	2e00      	cmp	r6, #0
 80021d0:	d140      	bne.n	8002254 <_malloc_r+0xcc>
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4631      	mov	r1, r6
 80021d6:	4638      	mov	r0, r7
 80021d8:	eb04 0803 	add.w	r8, r4, r3
 80021dc:	f000 f8ec 	bl	80023b8 <_sbrk_r>
 80021e0:	4580      	cmp	r8, r0
 80021e2:	d13a      	bne.n	800225a <_malloc_r+0xd2>
 80021e4:	6821      	ldr	r1, [r4, #0]
 80021e6:	3503      	adds	r5, #3
 80021e8:	1a6d      	subs	r5, r5, r1
 80021ea:	f025 0503 	bic.w	r5, r5, #3
 80021ee:	3508      	adds	r5, #8
 80021f0:	2d0c      	cmp	r5, #12
 80021f2:	bf38      	it	cc
 80021f4:	250c      	movcc	r5, #12
 80021f6:	4629      	mov	r1, r5
 80021f8:	4638      	mov	r0, r7
 80021fa:	f7ff ffa5 	bl	8002148 <sbrk_aligned>
 80021fe:	3001      	adds	r0, #1
 8002200:	d02b      	beq.n	800225a <_malloc_r+0xd2>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	442b      	add	r3, r5
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	e00e      	b.n	8002228 <_malloc_r+0xa0>
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	1b52      	subs	r2, r2, r5
 800220e:	d41e      	bmi.n	800224e <_malloc_r+0xc6>
 8002210:	2a0b      	cmp	r2, #11
 8002212:	d916      	bls.n	8002242 <_malloc_r+0xba>
 8002214:	1961      	adds	r1, r4, r5
 8002216:	42a3      	cmp	r3, r4
 8002218:	6025      	str	r5, [r4, #0]
 800221a:	bf18      	it	ne
 800221c:	6059      	strne	r1, [r3, #4]
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	bf08      	it	eq
 8002222:	6031      	streq	r1, [r6, #0]
 8002224:	5162      	str	r2, [r4, r5]
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	4638      	mov	r0, r7
 800222a:	f104 060b 	add.w	r6, r4, #11
 800222e:	f000 fab7 	bl	80027a0 <__malloc_unlock>
 8002232:	f026 0607 	bic.w	r6, r6, #7
 8002236:	1d23      	adds	r3, r4, #4
 8002238:	1af2      	subs	r2, r6, r3
 800223a:	d0b6      	beq.n	80021aa <_malloc_r+0x22>
 800223c:	1b9b      	subs	r3, r3, r6
 800223e:	50a3      	str	r3, [r4, r2]
 8002240:	e7b3      	b.n	80021aa <_malloc_r+0x22>
 8002242:	6862      	ldr	r2, [r4, #4]
 8002244:	42a3      	cmp	r3, r4
 8002246:	bf0c      	ite	eq
 8002248:	6032      	streq	r2, [r6, #0]
 800224a:	605a      	strne	r2, [r3, #4]
 800224c:	e7ec      	b.n	8002228 <_malloc_r+0xa0>
 800224e:	4623      	mov	r3, r4
 8002250:	6864      	ldr	r4, [r4, #4]
 8002252:	e7b2      	b.n	80021ba <_malloc_r+0x32>
 8002254:	4634      	mov	r4, r6
 8002256:	6876      	ldr	r6, [r6, #4]
 8002258:	e7b9      	b.n	80021ce <_malloc_r+0x46>
 800225a:	230c      	movs	r3, #12
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4638      	mov	r0, r7
 8002260:	f000 fa9e 	bl	80027a0 <__malloc_unlock>
 8002264:	e7a1      	b.n	80021aa <_malloc_r+0x22>
 8002266:	6025      	str	r5, [r4, #0]
 8002268:	e7de      	b.n	8002228 <_malloc_r+0xa0>
 800226a:	bf00      	nop
 800226c:	20000198 	.word	0x20000198

08002270 <iprintf>:
 8002270:	b40f      	push	{r0, r1, r2, r3}
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <iprintf+0x2c>)
 8002274:	b513      	push	{r0, r1, r4, lr}
 8002276:	681c      	ldr	r4, [r3, #0]
 8002278:	b124      	cbz	r4, 8002284 <iprintf+0x14>
 800227a:	69a3      	ldr	r3, [r4, #24]
 800227c:	b913      	cbnz	r3, 8002284 <iprintf+0x14>
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff fe1a 	bl	8001eb8 <__sinit>
 8002284:	ab05      	add	r3, sp, #20
 8002286:	9a04      	ldr	r2, [sp, #16]
 8002288:	68a1      	ldr	r1, [r4, #8]
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	4620      	mov	r0, r4
 800228e:	f000 fab7 	bl	8002800 <_vfiprintf_r>
 8002292:	b002      	add	sp, #8
 8002294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002298:	b004      	add	sp, #16
 800229a:	4770      	bx	lr
 800229c:	2000000c 	.word	0x2000000c

080022a0 <putchar>:
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <putchar+0x28>)
 80022a2:	b513      	push	{r0, r1, r4, lr}
 80022a4:	681c      	ldr	r4, [r3, #0]
 80022a6:	4601      	mov	r1, r0
 80022a8:	b134      	cbz	r4, 80022b8 <putchar+0x18>
 80022aa:	69a3      	ldr	r3, [r4, #24]
 80022ac:	b923      	cbnz	r3, 80022b8 <putchar+0x18>
 80022ae:	9001      	str	r0, [sp, #4]
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fe01 	bl	8001eb8 <__sinit>
 80022b6:	9901      	ldr	r1, [sp, #4]
 80022b8:	68a2      	ldr	r2, [r4, #8]
 80022ba:	4620      	mov	r0, r4
 80022bc:	b002      	add	sp, #8
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c2:	f000 bd61 	b.w	8002d88 <_putc_r>
 80022c6:	bf00      	nop
 80022c8:	2000000c 	.word	0x2000000c

080022cc <_puts_r>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	460e      	mov	r6, r1
 80022d0:	4605      	mov	r5, r0
 80022d2:	b118      	cbz	r0, 80022dc <_puts_r+0x10>
 80022d4:	6983      	ldr	r3, [r0, #24]
 80022d6:	b90b      	cbnz	r3, 80022dc <_puts_r+0x10>
 80022d8:	f7ff fdee 	bl	8001eb8 <__sinit>
 80022dc:	69ab      	ldr	r3, [r5, #24]
 80022de:	68ac      	ldr	r4, [r5, #8]
 80022e0:	b913      	cbnz	r3, 80022e8 <_puts_r+0x1c>
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff fde8 	bl	8001eb8 <__sinit>
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <_puts_r+0xd0>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d120      	bne.n	8002330 <_puts_r+0x64>
 80022ee:	686c      	ldr	r4, [r5, #4]
 80022f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022f2:	07db      	lsls	r3, r3, #31
 80022f4:	d405      	bmi.n	8002302 <_puts_r+0x36>
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	0598      	lsls	r0, r3, #22
 80022fa:	d402      	bmi.n	8002302 <_puts_r+0x36>
 80022fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022fe:	f7ff fecc 	bl	800209a <__retarget_lock_acquire_recursive>
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	0719      	lsls	r1, r3, #28
 8002306:	d51d      	bpl.n	8002344 <_puts_r+0x78>
 8002308:	6923      	ldr	r3, [r4, #16]
 800230a:	b1db      	cbz	r3, 8002344 <_puts_r+0x78>
 800230c:	3e01      	subs	r6, #1
 800230e:	68a3      	ldr	r3, [r4, #8]
 8002310:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002314:	3b01      	subs	r3, #1
 8002316:	60a3      	str	r3, [r4, #8]
 8002318:	bb39      	cbnz	r1, 800236a <_puts_r+0x9e>
 800231a:	2b00      	cmp	r3, #0
 800231c:	da38      	bge.n	8002390 <_puts_r+0xc4>
 800231e:	4622      	mov	r2, r4
 8002320:	210a      	movs	r1, #10
 8002322:	4628      	mov	r0, r5
 8002324:	f000 f89c 	bl	8002460 <__swbuf_r>
 8002328:	3001      	adds	r0, #1
 800232a:	d011      	beq.n	8002350 <_puts_r+0x84>
 800232c:	250a      	movs	r5, #10
 800232e:	e011      	b.n	8002354 <_puts_r+0x88>
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <_puts_r+0xd4>)
 8002332:	429c      	cmp	r4, r3
 8002334:	d101      	bne.n	800233a <_puts_r+0x6e>
 8002336:	68ac      	ldr	r4, [r5, #8]
 8002338:	e7da      	b.n	80022f0 <_puts_r+0x24>
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <_puts_r+0xd8>)
 800233c:	429c      	cmp	r4, r3
 800233e:	bf08      	it	eq
 8002340:	68ec      	ldreq	r4, [r5, #12]
 8002342:	e7d5      	b.n	80022f0 <_puts_r+0x24>
 8002344:	4621      	mov	r1, r4
 8002346:	4628      	mov	r0, r5
 8002348:	f000 f8ee 	bl	8002528 <__swsetup_r>
 800234c:	2800      	cmp	r0, #0
 800234e:	d0dd      	beq.n	800230c <_puts_r+0x40>
 8002350:	f04f 35ff 	mov.w	r5, #4294967295
 8002354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002356:	07da      	lsls	r2, r3, #31
 8002358:	d405      	bmi.n	8002366 <_puts_r+0x9a>
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	059b      	lsls	r3, r3, #22
 800235e:	d402      	bmi.n	8002366 <_puts_r+0x9a>
 8002360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002362:	f7ff fe9b 	bl	800209c <__retarget_lock_release_recursive>
 8002366:	4628      	mov	r0, r5
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	2b00      	cmp	r3, #0
 800236c:	da04      	bge.n	8002378 <_puts_r+0xac>
 800236e:	69a2      	ldr	r2, [r4, #24]
 8002370:	429a      	cmp	r2, r3
 8002372:	dc06      	bgt.n	8002382 <_puts_r+0xb6>
 8002374:	290a      	cmp	r1, #10
 8002376:	d004      	beq.n	8002382 <_puts_r+0xb6>
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	6022      	str	r2, [r4, #0]
 800237e:	7019      	strb	r1, [r3, #0]
 8002380:	e7c5      	b.n	800230e <_puts_r+0x42>
 8002382:	4622      	mov	r2, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f000 f86b 	bl	8002460 <__swbuf_r>
 800238a:	3001      	adds	r0, #1
 800238c:	d1bf      	bne.n	800230e <_puts_r+0x42>
 800238e:	e7df      	b.n	8002350 <_puts_r+0x84>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	250a      	movs	r5, #10
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	6022      	str	r2, [r4, #0]
 8002398:	701d      	strb	r5, [r3, #0]
 800239a:	e7db      	b.n	8002354 <_puts_r+0x88>
 800239c:	08003358 	.word	0x08003358
 80023a0:	08003378 	.word	0x08003378
 80023a4:	08003338 	.word	0x08003338

080023a8 <puts>:
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <puts+0xc>)
 80023aa:	4601      	mov	r1, r0
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f7ff bf8d 	b.w	80022cc <_puts_r>
 80023b2:	bf00      	nop
 80023b4:	2000000c 	.word	0x2000000c

080023b8 <_sbrk_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d06      	ldr	r5, [pc, #24]	; (80023d4 <_sbrk_r+0x1c>)
 80023bc:	2300      	movs	r3, #0
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	f000 fe3c 	bl	8003040 <_sbrk>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_sbrk_r+0x1a>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_sbrk_r+0x1a>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	200001a0 	.word	0x200001a0

080023d8 <__sread>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	460c      	mov	r4, r1
 80023dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e0:	f000 fd1a 	bl	8002e18 <_read_r>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	bfab      	itete	ge
 80023e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023ea:	89a3      	ldrhlt	r3, [r4, #12]
 80023ec:	181b      	addge	r3, r3, r0
 80023ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023f2:	bfac      	ite	ge
 80023f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80023f6:	81a3      	strhlt	r3, [r4, #12]
 80023f8:	bd10      	pop	{r4, pc}

080023fa <__swrite>:
 80023fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fe:	461f      	mov	r7, r3
 8002400:	898b      	ldrh	r3, [r1, #12]
 8002402:	05db      	lsls	r3, r3, #23
 8002404:	4605      	mov	r5, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4616      	mov	r6, r2
 800240a:	d505      	bpl.n	8002418 <__swrite+0x1e>
 800240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002410:	2302      	movs	r3, #2
 8002412:	2200      	movs	r2, #0
 8002414:	f000 f946 	bl	80026a4 <_lseek_r>
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800241e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002422:	81a3      	strh	r3, [r4, #12]
 8002424:	4632      	mov	r2, r6
 8002426:	463b      	mov	r3, r7
 8002428:	4628      	mov	r0, r5
 800242a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800242e:	f000 b869 	b.w	8002504 <_write_r>

08002432 <__sseek>:
 8002432:	b510      	push	{r4, lr}
 8002434:	460c      	mov	r4, r1
 8002436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800243a:	f000 f933 	bl	80026a4 <_lseek_r>
 800243e:	1c43      	adds	r3, r0, #1
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	bf15      	itete	ne
 8002444:	6560      	strne	r0, [r4, #84]	; 0x54
 8002446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800244a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800244e:	81a3      	strheq	r3, [r4, #12]
 8002450:	bf18      	it	ne
 8002452:	81a3      	strhne	r3, [r4, #12]
 8002454:	bd10      	pop	{r4, pc}

08002456 <__sclose>:
 8002456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245a:	f000 b8d3 	b.w	8002604 <_close_r>
	...

08002460 <__swbuf_r>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	460e      	mov	r6, r1
 8002464:	4614      	mov	r4, r2
 8002466:	4605      	mov	r5, r0
 8002468:	b118      	cbz	r0, 8002472 <__swbuf_r+0x12>
 800246a:	6983      	ldr	r3, [r0, #24]
 800246c:	b90b      	cbnz	r3, 8002472 <__swbuf_r+0x12>
 800246e:	f7ff fd23 	bl	8001eb8 <__sinit>
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <__swbuf_r+0x98>)
 8002474:	429c      	cmp	r4, r3
 8002476:	d12b      	bne.n	80024d0 <__swbuf_r+0x70>
 8002478:	686c      	ldr	r4, [r5, #4]
 800247a:	69a3      	ldr	r3, [r4, #24]
 800247c:	60a3      	str	r3, [r4, #8]
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	071a      	lsls	r2, r3, #28
 8002482:	d52f      	bpl.n	80024e4 <__swbuf_r+0x84>
 8002484:	6923      	ldr	r3, [r4, #16]
 8002486:	b36b      	cbz	r3, 80024e4 <__swbuf_r+0x84>
 8002488:	6923      	ldr	r3, [r4, #16]
 800248a:	6820      	ldr	r0, [r4, #0]
 800248c:	1ac0      	subs	r0, r0, r3
 800248e:	6963      	ldr	r3, [r4, #20]
 8002490:	b2f6      	uxtb	r6, r6
 8002492:	4283      	cmp	r3, r0
 8002494:	4637      	mov	r7, r6
 8002496:	dc04      	bgt.n	80024a2 <__swbuf_r+0x42>
 8002498:	4621      	mov	r1, r4
 800249a:	4628      	mov	r0, r5
 800249c:	f7ff fc66 	bl	8001d6c <_fflush_r>
 80024a0:	bb30      	cbnz	r0, 80024f0 <__swbuf_r+0x90>
 80024a2:	68a3      	ldr	r3, [r4, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60a3      	str	r3, [r4, #8]
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	6022      	str	r2, [r4, #0]
 80024ae:	701e      	strb	r6, [r3, #0]
 80024b0:	6963      	ldr	r3, [r4, #20]
 80024b2:	3001      	adds	r0, #1
 80024b4:	4283      	cmp	r3, r0
 80024b6:	d004      	beq.n	80024c2 <__swbuf_r+0x62>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	07db      	lsls	r3, r3, #31
 80024bc:	d506      	bpl.n	80024cc <__swbuf_r+0x6c>
 80024be:	2e0a      	cmp	r6, #10
 80024c0:	d104      	bne.n	80024cc <__swbuf_r+0x6c>
 80024c2:	4621      	mov	r1, r4
 80024c4:	4628      	mov	r0, r5
 80024c6:	f7ff fc51 	bl	8001d6c <_fflush_r>
 80024ca:	b988      	cbnz	r0, 80024f0 <__swbuf_r+0x90>
 80024cc:	4638      	mov	r0, r7
 80024ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <__swbuf_r+0x9c>)
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d101      	bne.n	80024da <__swbuf_r+0x7a>
 80024d6:	68ac      	ldr	r4, [r5, #8]
 80024d8:	e7cf      	b.n	800247a <__swbuf_r+0x1a>
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <__swbuf_r+0xa0>)
 80024dc:	429c      	cmp	r4, r3
 80024de:	bf08      	it	eq
 80024e0:	68ec      	ldreq	r4, [r5, #12]
 80024e2:	e7ca      	b.n	800247a <__swbuf_r+0x1a>
 80024e4:	4621      	mov	r1, r4
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 f81e 	bl	8002528 <__swsetup_r>
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d0cb      	beq.n	8002488 <__swbuf_r+0x28>
 80024f0:	f04f 37ff 	mov.w	r7, #4294967295
 80024f4:	e7ea      	b.n	80024cc <__swbuf_r+0x6c>
 80024f6:	bf00      	nop
 80024f8:	08003358 	.word	0x08003358
 80024fc:	08003378 	.word	0x08003378
 8002500:	08003338 	.word	0x08003338

08002504 <_write_r>:
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4d07      	ldr	r5, [pc, #28]	; (8002524 <_write_r+0x20>)
 8002508:	4604      	mov	r4, r0
 800250a:	4608      	mov	r0, r1
 800250c:	4611      	mov	r1, r2
 800250e:	2200      	movs	r2, #0
 8002510:	602a      	str	r2, [r5, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f7fe fa02 	bl	800091c <_write>
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	d102      	bne.n	8002522 <_write_r+0x1e>
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	b103      	cbz	r3, 8002522 <_write_r+0x1e>
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	bd38      	pop	{r3, r4, r5, pc}
 8002524:	200001a0 	.word	0x200001a0

08002528 <__swsetup_r>:
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <__swsetup_r+0xcc>)
 800252a:	b570      	push	{r4, r5, r6, lr}
 800252c:	681d      	ldr	r5, [r3, #0]
 800252e:	4606      	mov	r6, r0
 8002530:	460c      	mov	r4, r1
 8002532:	b125      	cbz	r5, 800253e <__swsetup_r+0x16>
 8002534:	69ab      	ldr	r3, [r5, #24]
 8002536:	b913      	cbnz	r3, 800253e <__swsetup_r+0x16>
 8002538:	4628      	mov	r0, r5
 800253a:	f7ff fcbd 	bl	8001eb8 <__sinit>
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <__swsetup_r+0xd0>)
 8002540:	429c      	cmp	r4, r3
 8002542:	d10f      	bne.n	8002564 <__swsetup_r+0x3c>
 8002544:	686c      	ldr	r4, [r5, #4]
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800254c:	0719      	lsls	r1, r3, #28
 800254e:	d42c      	bmi.n	80025aa <__swsetup_r+0x82>
 8002550:	06dd      	lsls	r5, r3, #27
 8002552:	d411      	bmi.n	8002578 <__swsetup_r+0x50>
 8002554:	2309      	movs	r3, #9
 8002556:	6033      	str	r3, [r6, #0]
 8002558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	f04f 30ff 	mov.w	r0, #4294967295
 8002562:	e03e      	b.n	80025e2 <__swsetup_r+0xba>
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <__swsetup_r+0xd4>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d101      	bne.n	800256e <__swsetup_r+0x46>
 800256a:	68ac      	ldr	r4, [r5, #8]
 800256c:	e7eb      	b.n	8002546 <__swsetup_r+0x1e>
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <__swsetup_r+0xd8>)
 8002570:	429c      	cmp	r4, r3
 8002572:	bf08      	it	eq
 8002574:	68ec      	ldreq	r4, [r5, #12]
 8002576:	e7e6      	b.n	8002546 <__swsetup_r+0x1e>
 8002578:	0758      	lsls	r0, r3, #29
 800257a:	d512      	bpl.n	80025a2 <__swsetup_r+0x7a>
 800257c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800257e:	b141      	cbz	r1, 8002592 <__swsetup_r+0x6a>
 8002580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002584:	4299      	cmp	r1, r3
 8002586:	d002      	beq.n	800258e <__swsetup_r+0x66>
 8002588:	4630      	mov	r0, r6
 800258a:	f7ff fd91 	bl	80020b0 <_free_r>
 800258e:	2300      	movs	r3, #0
 8002590:	6363      	str	r3, [r4, #52]	; 0x34
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	6063      	str	r3, [r4, #4]
 800259e:	6923      	ldr	r3, [r4, #16]
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	b94b      	cbnz	r3, 80025c2 <__swsetup_r+0x9a>
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b8:	d003      	beq.n	80025c2 <__swsetup_r+0x9a>
 80025ba:	4621      	mov	r1, r4
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f8a9 	bl	8002714 <__smakebuf_r>
 80025c2:	89a0      	ldrh	r0, [r4, #12]
 80025c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025c8:	f010 0301 	ands.w	r3, r0, #1
 80025cc:	d00a      	beq.n	80025e4 <__swsetup_r+0xbc>
 80025ce:	2300      	movs	r3, #0
 80025d0:	60a3      	str	r3, [r4, #8]
 80025d2:	6963      	ldr	r3, [r4, #20]
 80025d4:	425b      	negs	r3, r3
 80025d6:	61a3      	str	r3, [r4, #24]
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	b943      	cbnz	r3, 80025ee <__swsetup_r+0xc6>
 80025dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025e0:	d1ba      	bne.n	8002558 <__swsetup_r+0x30>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	0781      	lsls	r1, r0, #30
 80025e6:	bf58      	it	pl
 80025e8:	6963      	ldrpl	r3, [r4, #20]
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	e7f4      	b.n	80025d8 <__swsetup_r+0xb0>
 80025ee:	2000      	movs	r0, #0
 80025f0:	e7f7      	b.n	80025e2 <__swsetup_r+0xba>
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	08003358 	.word	0x08003358
 80025fc:	08003378 	.word	0x08003378
 8002600:	08003338 	.word	0x08003338

08002604 <_close_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4d06      	ldr	r5, [pc, #24]	; (8002620 <_close_r+0x1c>)
 8002608:	2300      	movs	r3, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	602b      	str	r3, [r5, #0]
 8002610:	f000 fcf6 	bl	8003000 <_close>
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d102      	bne.n	800261e <_close_r+0x1a>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	b103      	cbz	r3, 800261e <_close_r+0x1a>
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	bd38      	pop	{r3, r4, r5, pc}
 8002620:	200001a0 	.word	0x200001a0

08002624 <_getc_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	460c      	mov	r4, r1
 8002628:	4605      	mov	r5, r0
 800262a:	b118      	cbz	r0, 8002634 <_getc_r+0x10>
 800262c:	6983      	ldr	r3, [r0, #24]
 800262e:	b90b      	cbnz	r3, 8002634 <_getc_r+0x10>
 8002630:	f7ff fc42 	bl	8001eb8 <__sinit>
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <_getc_r+0x74>)
 8002636:	429c      	cmp	r4, r3
 8002638:	d11e      	bne.n	8002678 <_getc_r+0x54>
 800263a:	686c      	ldr	r4, [r5, #4]
 800263c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800263e:	07d8      	lsls	r0, r3, #31
 8002640:	d405      	bmi.n	800264e <_getc_r+0x2a>
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	0599      	lsls	r1, r3, #22
 8002646:	d402      	bmi.n	800264e <_getc_r+0x2a>
 8002648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800264a:	f7ff fd26 	bl	800209a <__retarget_lock_acquire_recursive>
 800264e:	6863      	ldr	r3, [r4, #4]
 8002650:	3b01      	subs	r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	6063      	str	r3, [r4, #4]
 8002656:	da19      	bge.n	800268c <_getc_r+0x68>
 8002658:	4628      	mov	r0, r5
 800265a:	4621      	mov	r1, r4
 800265c:	f000 fbee 	bl	8002e3c <__srget_r>
 8002660:	4605      	mov	r5, r0
 8002662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002664:	07da      	lsls	r2, r3, #31
 8002666:	d405      	bmi.n	8002674 <_getc_r+0x50>
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	059b      	lsls	r3, r3, #22
 800266c:	d402      	bmi.n	8002674 <_getc_r+0x50>
 800266e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002670:	f7ff fd14 	bl	800209c <__retarget_lock_release_recursive>
 8002674:	4628      	mov	r0, r5
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <_getc_r+0x78>)
 800267a:	429c      	cmp	r4, r3
 800267c:	d101      	bne.n	8002682 <_getc_r+0x5e>
 800267e:	68ac      	ldr	r4, [r5, #8]
 8002680:	e7dc      	b.n	800263c <_getc_r+0x18>
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_getc_r+0x7c>)
 8002684:	429c      	cmp	r4, r3
 8002686:	bf08      	it	eq
 8002688:	68ec      	ldreq	r4, [r5, #12]
 800268a:	e7d7      	b.n	800263c <_getc_r+0x18>
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	6022      	str	r2, [r4, #0]
 8002692:	781d      	ldrb	r5, [r3, #0]
 8002694:	e7e5      	b.n	8002662 <_getc_r+0x3e>
 8002696:	bf00      	nop
 8002698:	08003358 	.word	0x08003358
 800269c:	08003378 	.word	0x08003378
 80026a0:	08003338 	.word	0x08003338

080026a4 <_lseek_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4d07      	ldr	r5, [pc, #28]	; (80026c4 <_lseek_r+0x20>)
 80026a8:	4604      	mov	r4, r0
 80026aa:	4608      	mov	r0, r1
 80026ac:	4611      	mov	r1, r2
 80026ae:	2200      	movs	r2, #0
 80026b0:	602a      	str	r2, [r5, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 fcbc 	bl	8003030 <_lseek>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_lseek_r+0x1e>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_lseek_r+0x1e>
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	200001a0 	.word	0x200001a0

080026c8 <__swhatbuf_r>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	460e      	mov	r6, r1
 80026cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d0:	2900      	cmp	r1, #0
 80026d2:	b096      	sub	sp, #88	; 0x58
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	da08      	bge.n	80026ec <__swhatbuf_r+0x24>
 80026da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	061a      	lsls	r2, r3, #24
 80026e4:	d410      	bmi.n	8002708 <__swhatbuf_r+0x40>
 80026e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ea:	e00e      	b.n	800270a <__swhatbuf_r+0x42>
 80026ec:	466a      	mov	r2, sp
 80026ee:	f000 fbd1 	bl	8002e94 <_fstat_r>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	dbf1      	blt.n	80026da <__swhatbuf_r+0x12>
 80026f6:	9a01      	ldr	r2, [sp, #4]
 80026f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002700:	425a      	negs	r2, r3
 8002702:	415a      	adcs	r2, r3
 8002704:	602a      	str	r2, [r5, #0]
 8002706:	e7ee      	b.n	80026e6 <__swhatbuf_r+0x1e>
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	2000      	movs	r0, #0
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	b016      	add	sp, #88	; 0x58
 8002710:	bd70      	pop	{r4, r5, r6, pc}
	...

08002714 <__smakebuf_r>:
 8002714:	898b      	ldrh	r3, [r1, #12]
 8002716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002718:	079d      	lsls	r5, r3, #30
 800271a:	4606      	mov	r6, r0
 800271c:	460c      	mov	r4, r1
 800271e:	d507      	bpl.n	8002730 <__smakebuf_r+0x1c>
 8002720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002724:	6023      	str	r3, [r4, #0]
 8002726:	6123      	str	r3, [r4, #16]
 8002728:	2301      	movs	r3, #1
 800272a:	6163      	str	r3, [r4, #20]
 800272c:	b002      	add	sp, #8
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	ab01      	add	r3, sp, #4
 8002732:	466a      	mov	r2, sp
 8002734:	f7ff ffc8 	bl	80026c8 <__swhatbuf_r>
 8002738:	9900      	ldr	r1, [sp, #0]
 800273a:	4605      	mov	r5, r0
 800273c:	4630      	mov	r0, r6
 800273e:	f7ff fd23 	bl	8002188 <_malloc_r>
 8002742:	b948      	cbnz	r0, 8002758 <__smakebuf_r+0x44>
 8002744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002748:	059a      	lsls	r2, r3, #22
 800274a:	d4ef      	bmi.n	800272c <__smakebuf_r+0x18>
 800274c:	f023 0303 	bic.w	r3, r3, #3
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	81a3      	strh	r3, [r4, #12]
 8002756:	e7e3      	b.n	8002720 <__smakebuf_r+0xc>
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <__smakebuf_r+0x7c>)
 800275a:	62b3      	str	r3, [r6, #40]	; 0x28
 800275c:	89a3      	ldrh	r3, [r4, #12]
 800275e:	6020      	str	r0, [r4, #0]
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	6163      	str	r3, [r4, #20]
 800276a:	9b01      	ldr	r3, [sp, #4]
 800276c:	6120      	str	r0, [r4, #16]
 800276e:	b15b      	cbz	r3, 8002788 <__smakebuf_r+0x74>
 8002770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002774:	4630      	mov	r0, r6
 8002776:	f000 fb9f 	bl	8002eb8 <_isatty_r>
 800277a:	b128      	cbz	r0, 8002788 <__smakebuf_r+0x74>
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	89a0      	ldrh	r0, [r4, #12]
 800278a:	4305      	orrs	r5, r0
 800278c:	81a5      	strh	r5, [r4, #12]
 800278e:	e7cd      	b.n	800272c <__smakebuf_r+0x18>
 8002790:	08001e51 	.word	0x08001e51

08002794 <__malloc_lock>:
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <__malloc_lock+0x8>)
 8002796:	f7ff bc80 	b.w	800209a <__retarget_lock_acquire_recursive>
 800279a:	bf00      	nop
 800279c:	20000194 	.word	0x20000194

080027a0 <__malloc_unlock>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__malloc_unlock+0x8>)
 80027a2:	f7ff bc7b 	b.w	800209c <__retarget_lock_release_recursive>
 80027a6:	bf00      	nop
 80027a8:	20000194 	.word	0x20000194

080027ac <__sfputc_r>:
 80027ac:	6893      	ldr	r3, [r2, #8]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	b410      	push	{r4}
 80027b4:	6093      	str	r3, [r2, #8]
 80027b6:	da08      	bge.n	80027ca <__sfputc_r+0x1e>
 80027b8:	6994      	ldr	r4, [r2, #24]
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	db01      	blt.n	80027c2 <__sfputc_r+0x16>
 80027be:	290a      	cmp	r1, #10
 80027c0:	d103      	bne.n	80027ca <__sfputc_r+0x1e>
 80027c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027c6:	f7ff be4b 	b.w	8002460 <__swbuf_r>
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	1c58      	adds	r0, r3, #1
 80027ce:	6010      	str	r0, [r2, #0]
 80027d0:	7019      	strb	r1, [r3, #0]
 80027d2:	4608      	mov	r0, r1
 80027d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027d8:	4770      	bx	lr

080027da <__sfputs_r>:
 80027da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027dc:	4606      	mov	r6, r0
 80027de:	460f      	mov	r7, r1
 80027e0:	4614      	mov	r4, r2
 80027e2:	18d5      	adds	r5, r2, r3
 80027e4:	42ac      	cmp	r4, r5
 80027e6:	d101      	bne.n	80027ec <__sfputs_r+0x12>
 80027e8:	2000      	movs	r0, #0
 80027ea:	e007      	b.n	80027fc <__sfputs_r+0x22>
 80027ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f0:	463a      	mov	r2, r7
 80027f2:	4630      	mov	r0, r6
 80027f4:	f7ff ffda 	bl	80027ac <__sfputc_r>
 80027f8:	1c43      	adds	r3, r0, #1
 80027fa:	d1f3      	bne.n	80027e4 <__sfputs_r+0xa>
 80027fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002800 <_vfiprintf_r>:
 8002800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002804:	460d      	mov	r5, r1
 8002806:	b09d      	sub	sp, #116	; 0x74
 8002808:	4614      	mov	r4, r2
 800280a:	4698      	mov	r8, r3
 800280c:	4606      	mov	r6, r0
 800280e:	b118      	cbz	r0, 8002818 <_vfiprintf_r+0x18>
 8002810:	6983      	ldr	r3, [r0, #24]
 8002812:	b90b      	cbnz	r3, 8002818 <_vfiprintf_r+0x18>
 8002814:	f7ff fb50 	bl	8001eb8 <__sinit>
 8002818:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <_vfiprintf_r+0x240>)
 800281a:	429d      	cmp	r5, r3
 800281c:	d11b      	bne.n	8002856 <_vfiprintf_r+0x56>
 800281e:	6875      	ldr	r5, [r6, #4]
 8002820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002822:	07d9      	lsls	r1, r3, #31
 8002824:	d405      	bmi.n	8002832 <_vfiprintf_r+0x32>
 8002826:	89ab      	ldrh	r3, [r5, #12]
 8002828:	059a      	lsls	r2, r3, #22
 800282a:	d402      	bmi.n	8002832 <_vfiprintf_r+0x32>
 800282c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800282e:	f7ff fc34 	bl	800209a <__retarget_lock_acquire_recursive>
 8002832:	89ab      	ldrh	r3, [r5, #12]
 8002834:	071b      	lsls	r3, r3, #28
 8002836:	d501      	bpl.n	800283c <_vfiprintf_r+0x3c>
 8002838:	692b      	ldr	r3, [r5, #16]
 800283a:	b9eb      	cbnz	r3, 8002878 <_vfiprintf_r+0x78>
 800283c:	4629      	mov	r1, r5
 800283e:	4630      	mov	r0, r6
 8002840:	f7ff fe72 	bl	8002528 <__swsetup_r>
 8002844:	b1c0      	cbz	r0, 8002878 <_vfiprintf_r+0x78>
 8002846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002848:	07dc      	lsls	r4, r3, #31
 800284a:	d50e      	bpl.n	800286a <_vfiprintf_r+0x6a>
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	b01d      	add	sp, #116	; 0x74
 8002852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002856:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <_vfiprintf_r+0x244>)
 8002858:	429d      	cmp	r5, r3
 800285a:	d101      	bne.n	8002860 <_vfiprintf_r+0x60>
 800285c:	68b5      	ldr	r5, [r6, #8]
 800285e:	e7df      	b.n	8002820 <_vfiprintf_r+0x20>
 8002860:	4b79      	ldr	r3, [pc, #484]	; (8002a48 <_vfiprintf_r+0x248>)
 8002862:	429d      	cmp	r5, r3
 8002864:	bf08      	it	eq
 8002866:	68f5      	ldreq	r5, [r6, #12]
 8002868:	e7da      	b.n	8002820 <_vfiprintf_r+0x20>
 800286a:	89ab      	ldrh	r3, [r5, #12]
 800286c:	0598      	lsls	r0, r3, #22
 800286e:	d4ed      	bmi.n	800284c <_vfiprintf_r+0x4c>
 8002870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002872:	f7ff fc13 	bl	800209c <__retarget_lock_release_recursive>
 8002876:	e7e9      	b.n	800284c <_vfiprintf_r+0x4c>
 8002878:	2300      	movs	r3, #0
 800287a:	9309      	str	r3, [sp, #36]	; 0x24
 800287c:	2320      	movs	r3, #32
 800287e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002882:	f8cd 800c 	str.w	r8, [sp, #12]
 8002886:	2330      	movs	r3, #48	; 0x30
 8002888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a4c <_vfiprintf_r+0x24c>
 800288c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002890:	f04f 0901 	mov.w	r9, #1
 8002894:	4623      	mov	r3, r4
 8002896:	469a      	mov	sl, r3
 8002898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800289c:	b10a      	cbz	r2, 80028a2 <_vfiprintf_r+0xa2>
 800289e:	2a25      	cmp	r2, #37	; 0x25
 80028a0:	d1f9      	bne.n	8002896 <_vfiprintf_r+0x96>
 80028a2:	ebba 0b04 	subs.w	fp, sl, r4
 80028a6:	d00b      	beq.n	80028c0 <_vfiprintf_r+0xc0>
 80028a8:	465b      	mov	r3, fp
 80028aa:	4622      	mov	r2, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	4630      	mov	r0, r6
 80028b0:	f7ff ff93 	bl	80027da <__sfputs_r>
 80028b4:	3001      	adds	r0, #1
 80028b6:	f000 80aa 	beq.w	8002a0e <_vfiprintf_r+0x20e>
 80028ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028bc:	445a      	add	r2, fp
 80028be:	9209      	str	r2, [sp, #36]	; 0x24
 80028c0:	f89a 3000 	ldrb.w	r3, [sl]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a2 	beq.w	8002a0e <_vfiprintf_r+0x20e>
 80028ca:	2300      	movs	r3, #0
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d4:	f10a 0a01 	add.w	sl, sl, #1
 80028d8:	9304      	str	r3, [sp, #16]
 80028da:	9307      	str	r3, [sp, #28]
 80028dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028e0:	931a      	str	r3, [sp, #104]	; 0x68
 80028e2:	4654      	mov	r4, sl
 80028e4:	2205      	movs	r2, #5
 80028e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ea:	4858      	ldr	r0, [pc, #352]	; (8002a4c <_vfiprintf_r+0x24c>)
 80028ec:	f7fd fca8 	bl	8000240 <memchr>
 80028f0:	9a04      	ldr	r2, [sp, #16]
 80028f2:	b9d8      	cbnz	r0, 800292c <_vfiprintf_r+0x12c>
 80028f4:	06d1      	lsls	r1, r2, #27
 80028f6:	bf44      	itt	mi
 80028f8:	2320      	movmi	r3, #32
 80028fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028fe:	0713      	lsls	r3, r2, #28
 8002900:	bf44      	itt	mi
 8002902:	232b      	movmi	r3, #43	; 0x2b
 8002904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002908:	f89a 3000 	ldrb.w	r3, [sl]
 800290c:	2b2a      	cmp	r3, #42	; 0x2a
 800290e:	d015      	beq.n	800293c <_vfiprintf_r+0x13c>
 8002910:	9a07      	ldr	r2, [sp, #28]
 8002912:	4654      	mov	r4, sl
 8002914:	2000      	movs	r0, #0
 8002916:	f04f 0c0a 	mov.w	ip, #10
 800291a:	4621      	mov	r1, r4
 800291c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002920:	3b30      	subs	r3, #48	; 0x30
 8002922:	2b09      	cmp	r3, #9
 8002924:	d94e      	bls.n	80029c4 <_vfiprintf_r+0x1c4>
 8002926:	b1b0      	cbz	r0, 8002956 <_vfiprintf_r+0x156>
 8002928:	9207      	str	r2, [sp, #28]
 800292a:	e014      	b.n	8002956 <_vfiprintf_r+0x156>
 800292c:	eba0 0308 	sub.w	r3, r0, r8
 8002930:	fa09 f303 	lsl.w	r3, r9, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	9304      	str	r3, [sp, #16]
 8002938:	46a2      	mov	sl, r4
 800293a:	e7d2      	b.n	80028e2 <_vfiprintf_r+0xe2>
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	1d19      	adds	r1, r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	9103      	str	r1, [sp, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	bfbb      	ittet	lt
 8002948:	425b      	neglt	r3, r3
 800294a:	f042 0202 	orrlt.w	r2, r2, #2
 800294e:	9307      	strge	r3, [sp, #28]
 8002950:	9307      	strlt	r3, [sp, #28]
 8002952:	bfb8      	it	lt
 8002954:	9204      	strlt	r2, [sp, #16]
 8002956:	7823      	ldrb	r3, [r4, #0]
 8002958:	2b2e      	cmp	r3, #46	; 0x2e
 800295a:	d10c      	bne.n	8002976 <_vfiprintf_r+0x176>
 800295c:	7863      	ldrb	r3, [r4, #1]
 800295e:	2b2a      	cmp	r3, #42	; 0x2a
 8002960:	d135      	bne.n	80029ce <_vfiprintf_r+0x1ce>
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	9203      	str	r2, [sp, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	bfb8      	it	lt
 800296e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002972:	3402      	adds	r4, #2
 8002974:	9305      	str	r3, [sp, #20]
 8002976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002a5c <_vfiprintf_r+0x25c>
 800297a:	7821      	ldrb	r1, [r4, #0]
 800297c:	2203      	movs	r2, #3
 800297e:	4650      	mov	r0, sl
 8002980:	f7fd fc5e 	bl	8000240 <memchr>
 8002984:	b140      	cbz	r0, 8002998 <_vfiprintf_r+0x198>
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	eba0 000a 	sub.w	r0, r0, sl
 800298c:	fa03 f000 	lsl.w	r0, r3, r0
 8002990:	9b04      	ldr	r3, [sp, #16]
 8002992:	4303      	orrs	r3, r0
 8002994:	3401      	adds	r4, #1
 8002996:	9304      	str	r3, [sp, #16]
 8002998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800299c:	482c      	ldr	r0, [pc, #176]	; (8002a50 <_vfiprintf_r+0x250>)
 800299e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029a2:	2206      	movs	r2, #6
 80029a4:	f7fd fc4c 	bl	8000240 <memchr>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d03f      	beq.n	8002a2c <_vfiprintf_r+0x22c>
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <_vfiprintf_r+0x254>)
 80029ae:	bb1b      	cbnz	r3, 80029f8 <_vfiprintf_r+0x1f8>
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	3307      	adds	r3, #7
 80029b4:	f023 0307 	bic.w	r3, r3, #7
 80029b8:	3308      	adds	r3, #8
 80029ba:	9303      	str	r3, [sp, #12]
 80029bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029be:	443b      	add	r3, r7
 80029c0:	9309      	str	r3, [sp, #36]	; 0x24
 80029c2:	e767      	b.n	8002894 <_vfiprintf_r+0x94>
 80029c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80029c8:	460c      	mov	r4, r1
 80029ca:	2001      	movs	r0, #1
 80029cc:	e7a5      	b.n	800291a <_vfiprintf_r+0x11a>
 80029ce:	2300      	movs	r3, #0
 80029d0:	3401      	adds	r4, #1
 80029d2:	9305      	str	r3, [sp, #20]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f04f 0c0a 	mov.w	ip, #10
 80029da:	4620      	mov	r0, r4
 80029dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029e0:	3a30      	subs	r2, #48	; 0x30
 80029e2:	2a09      	cmp	r2, #9
 80029e4:	d903      	bls.n	80029ee <_vfiprintf_r+0x1ee>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0c5      	beq.n	8002976 <_vfiprintf_r+0x176>
 80029ea:	9105      	str	r1, [sp, #20]
 80029ec:	e7c3      	b.n	8002976 <_vfiprintf_r+0x176>
 80029ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80029f2:	4604      	mov	r4, r0
 80029f4:	2301      	movs	r3, #1
 80029f6:	e7f0      	b.n	80029da <_vfiprintf_r+0x1da>
 80029f8:	ab03      	add	r3, sp, #12
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	462a      	mov	r2, r5
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <_vfiprintf_r+0x258>)
 8002a00:	a904      	add	r1, sp, #16
 8002a02:	4630      	mov	r0, r6
 8002a04:	f3af 8000 	nop.w
 8002a08:	4607      	mov	r7, r0
 8002a0a:	1c78      	adds	r0, r7, #1
 8002a0c:	d1d6      	bne.n	80029bc <_vfiprintf_r+0x1bc>
 8002a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a10:	07d9      	lsls	r1, r3, #31
 8002a12:	d405      	bmi.n	8002a20 <_vfiprintf_r+0x220>
 8002a14:	89ab      	ldrh	r3, [r5, #12]
 8002a16:	059a      	lsls	r2, r3, #22
 8002a18:	d402      	bmi.n	8002a20 <_vfiprintf_r+0x220>
 8002a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a1c:	f7ff fb3e 	bl	800209c <__retarget_lock_release_recursive>
 8002a20:	89ab      	ldrh	r3, [r5, #12]
 8002a22:	065b      	lsls	r3, r3, #25
 8002a24:	f53f af12 	bmi.w	800284c <_vfiprintf_r+0x4c>
 8002a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a2a:	e711      	b.n	8002850 <_vfiprintf_r+0x50>
 8002a2c:	ab03      	add	r3, sp, #12
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	462a      	mov	r2, r5
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <_vfiprintf_r+0x258>)
 8002a34:	a904      	add	r1, sp, #16
 8002a36:	4630      	mov	r0, r6
 8002a38:	f000 f880 	bl	8002b3c <_printf_i>
 8002a3c:	e7e4      	b.n	8002a08 <_vfiprintf_r+0x208>
 8002a3e:	bf00      	nop
 8002a40:	08003358 	.word	0x08003358
 8002a44:	08003378 	.word	0x08003378
 8002a48:	08003338 	.word	0x08003338
 8002a4c:	0800339c 	.word	0x0800339c
 8002a50:	080033a6 	.word	0x080033a6
 8002a54:	00000000 	.word	0x00000000
 8002a58:	080027db 	.word	0x080027db
 8002a5c:	080033a2 	.word	0x080033a2

08002a60 <_printf_common>:
 8002a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	4616      	mov	r6, r2
 8002a66:	4699      	mov	r9, r3
 8002a68:	688a      	ldr	r2, [r1, #8]
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bfb8      	it	lt
 8002a74:	4613      	movlt	r3, r2
 8002a76:	6033      	str	r3, [r6, #0]
 8002a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	b10a      	cbz	r2, 8002a86 <_printf_common+0x26>
 8002a82:	3301      	adds	r3, #1
 8002a84:	6033      	str	r3, [r6, #0]
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	0699      	lsls	r1, r3, #26
 8002a8a:	bf42      	ittt	mi
 8002a8c:	6833      	ldrmi	r3, [r6, #0]
 8002a8e:	3302      	addmi	r3, #2
 8002a90:	6033      	strmi	r3, [r6, #0]
 8002a92:	6825      	ldr	r5, [r4, #0]
 8002a94:	f015 0506 	ands.w	r5, r5, #6
 8002a98:	d106      	bne.n	8002aa8 <_printf_common+0x48>
 8002a9a:	f104 0a19 	add.w	sl, r4, #25
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	6832      	ldr	r2, [r6, #0]
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	42ab      	cmp	r3, r5
 8002aa6:	dc26      	bgt.n	8002af6 <_printf_common+0x96>
 8002aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002aac:	1e13      	subs	r3, r2, #0
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	bf18      	it	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	0692      	lsls	r2, r2, #26
 8002ab6:	d42b      	bmi.n	8002b10 <_printf_common+0xb0>
 8002ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002abc:	4649      	mov	r1, r9
 8002abe:	4638      	mov	r0, r7
 8002ac0:	47c0      	blx	r8
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	d01e      	beq.n	8002b04 <_printf_common+0xa4>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	68e5      	ldr	r5, [r4, #12]
 8002aca:	6832      	ldr	r2, [r6, #0]
 8002acc:	f003 0306 	and.w	r3, r3, #6
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	bf08      	it	eq
 8002ad4:	1aad      	subeq	r5, r5, r2
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	bf0c      	ite	eq
 8002adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae0:	2500      	movne	r5, #0
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bfc4      	itt	gt
 8002ae6:	1a9b      	subgt	r3, r3, r2
 8002ae8:	18ed      	addgt	r5, r5, r3
 8002aea:	2600      	movs	r6, #0
 8002aec:	341a      	adds	r4, #26
 8002aee:	42b5      	cmp	r5, r6
 8002af0:	d11a      	bne.n	8002b28 <_printf_common+0xc8>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e008      	b.n	8002b08 <_printf_common+0xa8>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4652      	mov	r2, sl
 8002afa:	4649      	mov	r1, r9
 8002afc:	4638      	mov	r0, r7
 8002afe:	47c0      	blx	r8
 8002b00:	3001      	adds	r0, #1
 8002b02:	d103      	bne.n	8002b0c <_printf_common+0xac>
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0c:	3501      	adds	r5, #1
 8002b0e:	e7c6      	b.n	8002a9e <_printf_common+0x3e>
 8002b10:	18e1      	adds	r1, r4, r3
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	2030      	movs	r0, #48	; 0x30
 8002b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b1a:	4422      	add	r2, r4
 8002b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b24:	3302      	adds	r3, #2
 8002b26:	e7c7      	b.n	8002ab8 <_printf_common+0x58>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4638      	mov	r0, r7
 8002b30:	47c0      	blx	r8
 8002b32:	3001      	adds	r0, #1
 8002b34:	d0e6      	beq.n	8002b04 <_printf_common+0xa4>
 8002b36:	3601      	adds	r6, #1
 8002b38:	e7d9      	b.n	8002aee <_printf_common+0x8e>
	...

08002b3c <_printf_i>:
 8002b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b40:	7e0f      	ldrb	r7, [r1, #24]
 8002b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b44:	2f78      	cmp	r7, #120	; 0x78
 8002b46:	4691      	mov	r9, r2
 8002b48:	4680      	mov	r8, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	469a      	mov	sl, r3
 8002b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b52:	d807      	bhi.n	8002b64 <_printf_i+0x28>
 8002b54:	2f62      	cmp	r7, #98	; 0x62
 8002b56:	d80a      	bhi.n	8002b6e <_printf_i+0x32>
 8002b58:	2f00      	cmp	r7, #0
 8002b5a:	f000 80d8 	beq.w	8002d0e <_printf_i+0x1d2>
 8002b5e:	2f58      	cmp	r7, #88	; 0x58
 8002b60:	f000 80a3 	beq.w	8002caa <_printf_i+0x16e>
 8002b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b6c:	e03a      	b.n	8002be4 <_printf_i+0xa8>
 8002b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b72:	2b15      	cmp	r3, #21
 8002b74:	d8f6      	bhi.n	8002b64 <_printf_i+0x28>
 8002b76:	a101      	add	r1, pc, #4	; (adr r1, 8002b7c <_printf_i+0x40>)
 8002b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b7c:	08002bd5 	.word	0x08002bd5
 8002b80:	08002be9 	.word	0x08002be9
 8002b84:	08002b65 	.word	0x08002b65
 8002b88:	08002b65 	.word	0x08002b65
 8002b8c:	08002b65 	.word	0x08002b65
 8002b90:	08002b65 	.word	0x08002b65
 8002b94:	08002be9 	.word	0x08002be9
 8002b98:	08002b65 	.word	0x08002b65
 8002b9c:	08002b65 	.word	0x08002b65
 8002ba0:	08002b65 	.word	0x08002b65
 8002ba4:	08002b65 	.word	0x08002b65
 8002ba8:	08002cf5 	.word	0x08002cf5
 8002bac:	08002c19 	.word	0x08002c19
 8002bb0:	08002cd7 	.word	0x08002cd7
 8002bb4:	08002b65 	.word	0x08002b65
 8002bb8:	08002b65 	.word	0x08002b65
 8002bbc:	08002d17 	.word	0x08002d17
 8002bc0:	08002b65 	.word	0x08002b65
 8002bc4:	08002c19 	.word	0x08002c19
 8002bc8:	08002b65 	.word	0x08002b65
 8002bcc:	08002b65 	.word	0x08002b65
 8002bd0:	08002cdf 	.word	0x08002cdf
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	602a      	str	r2, [r5, #0]
 8002bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0a3      	b.n	8002d30 <_printf_i+0x1f4>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	6829      	ldr	r1, [r5, #0]
 8002bec:	0606      	lsls	r6, r0, #24
 8002bee:	f101 0304 	add.w	r3, r1, #4
 8002bf2:	d50a      	bpl.n	8002c0a <_printf_i+0xce>
 8002bf4:	680e      	ldr	r6, [r1, #0]
 8002bf6:	602b      	str	r3, [r5, #0]
 8002bf8:	2e00      	cmp	r6, #0
 8002bfa:	da03      	bge.n	8002c04 <_printf_i+0xc8>
 8002bfc:	232d      	movs	r3, #45	; 0x2d
 8002bfe:	4276      	negs	r6, r6
 8002c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c04:	485e      	ldr	r0, [pc, #376]	; (8002d80 <_printf_i+0x244>)
 8002c06:	230a      	movs	r3, #10
 8002c08:	e019      	b.n	8002c3e <_printf_i+0x102>
 8002c0a:	680e      	ldr	r6, [r1, #0]
 8002c0c:	602b      	str	r3, [r5, #0]
 8002c0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c12:	bf18      	it	ne
 8002c14:	b236      	sxthne	r6, r6
 8002c16:	e7ef      	b.n	8002bf8 <_printf_i+0xbc>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	1d19      	adds	r1, r3, #4
 8002c1e:	6029      	str	r1, [r5, #0]
 8002c20:	0601      	lsls	r1, r0, #24
 8002c22:	d501      	bpl.n	8002c28 <_printf_i+0xec>
 8002c24:	681e      	ldr	r6, [r3, #0]
 8002c26:	e002      	b.n	8002c2e <_printf_i+0xf2>
 8002c28:	0646      	lsls	r6, r0, #25
 8002c2a:	d5fb      	bpl.n	8002c24 <_printf_i+0xe8>
 8002c2c:	881e      	ldrh	r6, [r3, #0]
 8002c2e:	4854      	ldr	r0, [pc, #336]	; (8002d80 <_printf_i+0x244>)
 8002c30:	2f6f      	cmp	r7, #111	; 0x6f
 8002c32:	bf0c      	ite	eq
 8002c34:	2308      	moveq	r3, #8
 8002c36:	230a      	movne	r3, #10
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c3e:	6865      	ldr	r5, [r4, #4]
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	bfa2      	ittt	ge
 8002c46:	6821      	ldrge	r1, [r4, #0]
 8002c48:	f021 0104 	bicge.w	r1, r1, #4
 8002c4c:	6021      	strge	r1, [r4, #0]
 8002c4e:	b90e      	cbnz	r6, 8002c54 <_printf_i+0x118>
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	d04d      	beq.n	8002cf0 <_printf_i+0x1b4>
 8002c54:	4615      	mov	r5, r2
 8002c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8002c5e:	5dc7      	ldrb	r7, [r0, r7]
 8002c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c64:	4637      	mov	r7, r6
 8002c66:	42bb      	cmp	r3, r7
 8002c68:	460e      	mov	r6, r1
 8002c6a:	d9f4      	bls.n	8002c56 <_printf_i+0x11a>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d10b      	bne.n	8002c88 <_printf_i+0x14c>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	07de      	lsls	r6, r3, #31
 8002c74:	d508      	bpl.n	8002c88 <_printf_i+0x14c>
 8002c76:	6923      	ldr	r3, [r4, #16]
 8002c78:	6861      	ldr	r1, [r4, #4]
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	bfde      	ittt	le
 8002c7e:	2330      	movle	r3, #48	; 0x30
 8002c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c88:	1b52      	subs	r2, r2, r5
 8002c8a:	6122      	str	r2, [r4, #16]
 8002c8c:	f8cd a000 	str.w	sl, [sp]
 8002c90:	464b      	mov	r3, r9
 8002c92:	aa03      	add	r2, sp, #12
 8002c94:	4621      	mov	r1, r4
 8002c96:	4640      	mov	r0, r8
 8002c98:	f7ff fee2 	bl	8002a60 <_printf_common>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d14c      	bne.n	8002d3a <_printf_i+0x1fe>
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	b004      	add	sp, #16
 8002ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002caa:	4835      	ldr	r0, [pc, #212]	; (8002d80 <_printf_i+0x244>)
 8002cac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002cb0:	6829      	ldr	r1, [r5, #0]
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cb8:	6029      	str	r1, [r5, #0]
 8002cba:	061d      	lsls	r5, r3, #24
 8002cbc:	d514      	bpl.n	8002ce8 <_printf_i+0x1ac>
 8002cbe:	07df      	lsls	r7, r3, #31
 8002cc0:	bf44      	itt	mi
 8002cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8002cc6:	6023      	strmi	r3, [r4, #0]
 8002cc8:	b91e      	cbnz	r6, 8002cd2 <_printf_i+0x196>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	f023 0320 	bic.w	r3, r3, #32
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	e7b0      	b.n	8002c38 <_printf_i+0xfc>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f043 0320 	orr.w	r3, r3, #32
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	2378      	movs	r3, #120	; 0x78
 8002ce0:	4828      	ldr	r0, [pc, #160]	; (8002d84 <_printf_i+0x248>)
 8002ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce6:	e7e3      	b.n	8002cb0 <_printf_i+0x174>
 8002ce8:	0659      	lsls	r1, r3, #25
 8002cea:	bf48      	it	mi
 8002cec:	b2b6      	uxthmi	r6, r6
 8002cee:	e7e6      	b.n	8002cbe <_printf_i+0x182>
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	e7bb      	b.n	8002c6c <_printf_i+0x130>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	6826      	ldr	r6, [r4, #0]
 8002cf8:	6961      	ldr	r1, [r4, #20]
 8002cfa:	1d18      	adds	r0, r3, #4
 8002cfc:	6028      	str	r0, [r5, #0]
 8002cfe:	0635      	lsls	r5, r6, #24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	d501      	bpl.n	8002d08 <_printf_i+0x1cc>
 8002d04:	6019      	str	r1, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <_printf_i+0x1d2>
 8002d08:	0670      	lsls	r0, r6, #25
 8002d0a:	d5fb      	bpl.n	8002d04 <_printf_i+0x1c8>
 8002d0c:	8019      	strh	r1, [r3, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	4615      	mov	r5, r2
 8002d14:	e7ba      	b.n	8002c8c <_printf_i+0x150>
 8002d16:	682b      	ldr	r3, [r5, #0]
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	602a      	str	r2, [r5, #0]
 8002d1c:	681d      	ldr	r5, [r3, #0]
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	2100      	movs	r1, #0
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7fd fa8c 	bl	8000240 <memchr>
 8002d28:	b108      	cbz	r0, 8002d2e <_printf_i+0x1f2>
 8002d2a:	1b40      	subs	r0, r0, r5
 8002d2c:	6060      	str	r0, [r4, #4]
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	6123      	str	r3, [r4, #16]
 8002d32:	2300      	movs	r3, #0
 8002d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d38:	e7a8      	b.n	8002c8c <_printf_i+0x150>
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	4649      	mov	r1, r9
 8002d40:	4640      	mov	r0, r8
 8002d42:	47d0      	blx	sl
 8002d44:	3001      	adds	r0, #1
 8002d46:	d0ab      	beq.n	8002ca0 <_printf_i+0x164>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	079b      	lsls	r3, r3, #30
 8002d4c:	d413      	bmi.n	8002d76 <_printf_i+0x23a>
 8002d4e:	68e0      	ldr	r0, [r4, #12]
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	4298      	cmp	r0, r3
 8002d54:	bfb8      	it	lt
 8002d56:	4618      	movlt	r0, r3
 8002d58:	e7a4      	b.n	8002ca4 <_printf_i+0x168>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	4649      	mov	r1, r9
 8002d60:	4640      	mov	r0, r8
 8002d62:	47d0      	blx	sl
 8002d64:	3001      	adds	r0, #1
 8002d66:	d09b      	beq.n	8002ca0 <_printf_i+0x164>
 8002d68:	3501      	adds	r5, #1
 8002d6a:	68e3      	ldr	r3, [r4, #12]
 8002d6c:	9903      	ldr	r1, [sp, #12]
 8002d6e:	1a5b      	subs	r3, r3, r1
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	dcf2      	bgt.n	8002d5a <_printf_i+0x21e>
 8002d74:	e7eb      	b.n	8002d4e <_printf_i+0x212>
 8002d76:	2500      	movs	r5, #0
 8002d78:	f104 0619 	add.w	r6, r4, #25
 8002d7c:	e7f5      	b.n	8002d6a <_printf_i+0x22e>
 8002d7e:	bf00      	nop
 8002d80:	080033ad 	.word	0x080033ad
 8002d84:	080033be 	.word	0x080033be

08002d88 <_putc_r>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	460d      	mov	r5, r1
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	4606      	mov	r6, r0
 8002d90:	b118      	cbz	r0, 8002d9a <_putc_r+0x12>
 8002d92:	6983      	ldr	r3, [r0, #24]
 8002d94:	b90b      	cbnz	r3, 8002d9a <_putc_r+0x12>
 8002d96:	f7ff f88f 	bl	8001eb8 <__sinit>
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <_putc_r+0x84>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	d124      	bne.n	8002dea <_putc_r+0x62>
 8002da0:	6874      	ldr	r4, [r6, #4]
 8002da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002da4:	07d8      	lsls	r0, r3, #31
 8002da6:	d405      	bmi.n	8002db4 <_putc_r+0x2c>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	0599      	lsls	r1, r3, #22
 8002dac:	d402      	bmi.n	8002db4 <_putc_r+0x2c>
 8002dae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db0:	f7ff f973 	bl	800209a <__retarget_lock_acquire_recursive>
 8002db4:	68a3      	ldr	r3, [r4, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	60a3      	str	r3, [r4, #8]
 8002dbc:	da05      	bge.n	8002dca <_putc_r+0x42>
 8002dbe:	69a2      	ldr	r2, [r4, #24]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	db1c      	blt.n	8002dfe <_putc_r+0x76>
 8002dc4:	b2eb      	uxtb	r3, r5
 8002dc6:	2b0a      	cmp	r3, #10
 8002dc8:	d019      	beq.n	8002dfe <_putc_r+0x76>
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	701d      	strb	r5, [r3, #0]
 8002dd2:	b2ed      	uxtb	r5, r5
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07da      	lsls	r2, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_putc_r+0x5e>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	059b      	lsls	r3, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_putc_r+0x5e>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f7ff f95b 	bl	800209c <__retarget_lock_release_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <_putc_r+0x88>)
 8002dec:	429c      	cmp	r4, r3
 8002dee:	d101      	bne.n	8002df4 <_putc_r+0x6c>
 8002df0:	68b4      	ldr	r4, [r6, #8]
 8002df2:	e7d6      	b.n	8002da2 <_putc_r+0x1a>
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <_putc_r+0x8c>)
 8002df6:	429c      	cmp	r4, r3
 8002df8:	bf08      	it	eq
 8002dfa:	68f4      	ldreq	r4, [r6, #12]
 8002dfc:	e7d1      	b.n	8002da2 <_putc_r+0x1a>
 8002dfe:	4629      	mov	r1, r5
 8002e00:	4622      	mov	r2, r4
 8002e02:	4630      	mov	r0, r6
 8002e04:	f7ff fb2c 	bl	8002460 <__swbuf_r>
 8002e08:	4605      	mov	r5, r0
 8002e0a:	e7e3      	b.n	8002dd4 <_putc_r+0x4c>
 8002e0c:	08003358 	.word	0x08003358
 8002e10:	08003378 	.word	0x08003378
 8002e14:	08003338 	.word	0x08003338

08002e18 <_read_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	4d07      	ldr	r5, [pc, #28]	; (8002e38 <_read_r+0x20>)
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	4608      	mov	r0, r1
 8002e20:	4611      	mov	r1, r2
 8002e22:	2200      	movs	r2, #0
 8002e24:	602a      	str	r2, [r5, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7fd fd84 	bl	8000934 <_read>
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d102      	bne.n	8002e36 <_read_r+0x1e>
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	b103      	cbz	r3, 8002e36 <_read_r+0x1e>
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	200001a0 	.word	0x200001a0

08002e3c <__srget_r>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4605      	mov	r5, r0
 8002e42:	b118      	cbz	r0, 8002e4c <__srget_r+0x10>
 8002e44:	6983      	ldr	r3, [r0, #24]
 8002e46:	b90b      	cbnz	r3, 8002e4c <__srget_r+0x10>
 8002e48:	f7ff f836 	bl	8001eb8 <__sinit>
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <__srget_r+0x4c>)
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	d10d      	bne.n	8002e6e <__srget_r+0x32>
 8002e52:	686c      	ldr	r4, [r5, #4]
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f848 	bl	8002eec <__srefill_r>
 8002e5c:	b988      	cbnz	r0, 8002e82 <__srget_r+0x46>
 8002e5e:	6863      	ldr	r3, [r4, #4]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	6063      	str	r3, [r4, #4]
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	6022      	str	r2, [r4, #0]
 8002e6a:	7818      	ldrb	r0, [r3, #0]
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <__srget_r+0x50>)
 8002e70:	429c      	cmp	r4, r3
 8002e72:	d101      	bne.n	8002e78 <__srget_r+0x3c>
 8002e74:	68ac      	ldr	r4, [r5, #8]
 8002e76:	e7ed      	b.n	8002e54 <__srget_r+0x18>
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <__srget_r+0x54>)
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	bf08      	it	eq
 8002e7e:	68ec      	ldreq	r4, [r5, #12]
 8002e80:	e7e8      	b.n	8002e54 <__srget_r+0x18>
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	e7f1      	b.n	8002e6c <__srget_r+0x30>
 8002e88:	08003358 	.word	0x08003358
 8002e8c:	08003378 	.word	0x08003378
 8002e90:	08003338 	.word	0x08003338

08002e94 <_fstat_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4d07      	ldr	r5, [pc, #28]	; (8002eb4 <_fstat_r+0x20>)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	602b      	str	r3, [r5, #0]
 8002ea2:	f000 f8b5 	bl	8003010 <_fstat>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	d102      	bne.n	8002eb0 <_fstat_r+0x1c>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	b103      	cbz	r3, 8002eb0 <_fstat_r+0x1c>
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200001a0 	.word	0x200001a0

08002eb8 <_isatty_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4d06      	ldr	r5, [pc, #24]	; (8002ed4 <_isatty_r+0x1c>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	f000 f8ac 	bl	8003020 <_isatty>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_isatty_r+0x1a>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_isatty_r+0x1a>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	200001a0 	.word	0x200001a0

08002ed8 <lflush>:
 8002ed8:	8983      	ldrh	r3, [r0, #12]
 8002eda:	f003 0309 	and.w	r3, r3, #9
 8002ede:	2b09      	cmp	r3, #9
 8002ee0:	d101      	bne.n	8002ee6 <lflush+0xe>
 8002ee2:	f7fe bf7f 	b.w	8001de4 <fflush>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	4770      	bx	lr
	...

08002eec <__srefill_r>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	460c      	mov	r4, r1
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b118      	cbz	r0, 8002efc <__srefill_r+0x10>
 8002ef4:	6983      	ldr	r3, [r0, #24]
 8002ef6:	b90b      	cbnz	r3, 8002efc <__srefill_r+0x10>
 8002ef8:	f7fe ffde 	bl	8001eb8 <__sinit>
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <__srefill_r+0x100>)
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d10a      	bne.n	8002f18 <__srefill_r+0x2c>
 8002f02:	686c      	ldr	r4, [r5, #4]
 8002f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	069e      	lsls	r6, r3, #26
 8002f10:	d50c      	bpl.n	8002f2c <__srefill_r+0x40>
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e066      	b.n	8002fe6 <__srefill_r+0xfa>
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <__srefill_r+0x104>)
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d101      	bne.n	8002f22 <__srefill_r+0x36>
 8002f1e:	68ac      	ldr	r4, [r5, #8]
 8002f20:	e7f0      	b.n	8002f04 <__srefill_r+0x18>
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <__srefill_r+0x108>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	bf08      	it	eq
 8002f28:	68ec      	ldreq	r4, [r5, #12]
 8002f2a:	e7eb      	b.n	8002f04 <__srefill_r+0x18>
 8002f2c:	0758      	lsls	r0, r3, #29
 8002f2e:	d448      	bmi.n	8002fc2 <__srefill_r+0xd6>
 8002f30:	06d9      	lsls	r1, r3, #27
 8002f32:	d405      	bmi.n	8002f40 <__srefill_r+0x54>
 8002f34:	2309      	movs	r3, #9
 8002f36:	602b      	str	r3, [r5, #0]
 8002f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f3c:	81a3      	strh	r3, [r4, #12]
 8002f3e:	e7e8      	b.n	8002f12 <__srefill_r+0x26>
 8002f40:	071a      	lsls	r2, r3, #28
 8002f42:	d50b      	bpl.n	8002f5c <__srefill_r+0x70>
 8002f44:	4621      	mov	r1, r4
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7fe ff10 	bl	8001d6c <_fflush_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d1e0      	bne.n	8002f12 <__srefill_r+0x26>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	60a0      	str	r0, [r4, #8]
 8002f54:	f023 0308 	bic.w	r3, r3, #8
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	61a0      	str	r0, [r4, #24]
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	b91b      	cbnz	r3, 8002f70 <__srefill_r+0x84>
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f7ff fbd2 	bl	8002714 <__smakebuf_r>
 8002f70:	89a6      	ldrh	r6, [r4, #12]
 8002f72:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002f76:	07b3      	lsls	r3, r6, #30
 8002f78:	d00f      	beq.n	8002f9a <__srefill_r+0xae>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <__srefill_r+0x10c>)
 8002f80:	491e      	ldr	r1, [pc, #120]	; (8002ffc <__srefill_r+0x110>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	f006 0609 	and.w	r6, r6, #9
 8002f88:	f7ff f814 	bl	8001fb4 <_fwalk>
 8002f8c:	2e09      	cmp	r6, #9
 8002f8e:	81a7      	strh	r7, [r4, #12]
 8002f90:	d103      	bne.n	8002f9a <__srefill_r+0xae>
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f7fe fe63 	bl	8001c60 <__sflush_r>
 8002f9a:	6922      	ldr	r2, [r4, #16]
 8002f9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002f9e:	6963      	ldr	r3, [r4, #20]
 8002fa0:	6a21      	ldr	r1, [r4, #32]
 8002fa2:	6022      	str	r2, [r4, #0]
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b0      	blx	r6
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	6060      	str	r0, [r4, #4]
 8002fac:	dc1c      	bgt.n	8002fe8 <__srefill_r+0xfc>
 8002fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb2:	bf17      	itett	ne
 8002fb4:	2200      	movne	r2, #0
 8002fb6:	f043 0320 	orreq.w	r3, r3, #32
 8002fba:	6062      	strne	r2, [r4, #4]
 8002fbc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002fc0:	e7bc      	b.n	8002f3c <__srefill_r+0x50>
 8002fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d0cd      	beq.n	8002f64 <__srefill_r+0x78>
 8002fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	d002      	beq.n	8002fd6 <__srefill_r+0xea>
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff f86d 	bl	80020b0 <_free_r>
 8002fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd8:	6063      	str	r3, [r4, #4]
 8002fda:	2000      	movs	r0, #0
 8002fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0c0      	beq.n	8002f64 <__srefill_r+0x78>
 8002fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e7fc      	b.n	8002fe6 <__srefill_r+0xfa>
 8002fec:	08003358 	.word	0x08003358
 8002ff0:	08003378 	.word	0x08003378
 8002ff4:	08003338 	.word	0x08003338
 8002ff8:	08003398 	.word	0x08003398
 8002ffc:	08002ed9 	.word	0x08002ed9

08003000 <_close>:
 8003000:	4b02      	ldr	r3, [pc, #8]	; (800300c <_close+0xc>)
 8003002:	2258      	movs	r2, #88	; 0x58
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f04f 30ff 	mov.w	r0, #4294967295
 800300a:	4770      	bx	lr
 800300c:	200001a0 	.word	0x200001a0

08003010 <_fstat>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <_fstat+0xc>)
 8003012:	2258      	movs	r2, #88	; 0x58
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f04f 30ff 	mov.w	r0, #4294967295
 800301a:	4770      	bx	lr
 800301c:	200001a0 	.word	0x200001a0

08003020 <_isatty>:
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <_isatty+0xc>)
 8003022:	2258      	movs	r2, #88	; 0x58
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	2000      	movs	r0, #0
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	200001a0 	.word	0x200001a0

08003030 <_lseek>:
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <_lseek+0xc>)
 8003032:	2258      	movs	r2, #88	; 0x58
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f04f 30ff 	mov.w	r0, #4294967295
 800303a:	4770      	bx	lr
 800303c:	200001a0 	.word	0x200001a0

08003040 <_sbrk>:
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <_sbrk+0x14>)
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	b909      	cbnz	r1, 800304c <_sbrk+0xc>
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <_sbrk+0x18>)
 800304a:	6011      	str	r1, [r2, #0]
 800304c:	6810      	ldr	r0, [r2, #0]
 800304e:	4403      	add	r3, r0
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4770      	bx	lr
 8003054:	200001a4 	.word	0x200001a4
 8003058:	200001a8 	.word	0x200001a8

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
